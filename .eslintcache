[{"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\index.js":"1","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\reportWebVitals.js":"2","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\App.js":"3","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\redux\\store.js":"4","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\helper\\scroll-to-top.js":"5","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\Routes\\Routes.jsx":"6","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\navbar\\Navbar.jsx":"7","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\redux\\reducers\\index.js":"8","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\AllCharacters.js":"9","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\Homepage.js":"10","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\LoginPage.js":"11","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\spells\\IndividualSpell.js":"12","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\characterCreation\\CreateCharacter.js":"13","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\SignUpForm.jsx":"14","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\spells\\Spells.jsx":"15","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\characterCreation\\CharacterCreationForm.jsx":"16","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\Classes.jsx":"17","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\DisplayEquipment.jsx":"18","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\Language.jsx":"19","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\IndividualRace.jsx":"20","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\Trait.jsx":"21","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\Proficiency.jsx":"22","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\Races.jsx":"23","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\monsters\\Monsters.jsx":"24","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\monsters\\IndividualMonster.jsx":"25","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\monsters\\ConditionImmunity.jsx":"26","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\builds\\Builds.jsx":"27","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\profile\\Profile.jsx":"28","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\builds\\DisplayCharacter.jsx":"29","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\editCharacters\\EditCharacter.jsx":"30","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\ClassLevels.jsx":"31","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\Skills.jsx":"32","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\ClassSpells.jsx":"33","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\redux\\reducers\\actionTypes.js":"34","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\subclasses\\SubClasses.jsx":"35","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\subclasses\\IndividualSubClass.jsx":"36","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\features\\IndividualFeature.jsx":"37","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\features\\Features.jsx":"38","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\IndividualEquipment.jsx":"39","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\StartingEquipments.jsx":"40","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\AllEquipment.jsx":"41","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\Bonus.jsx":"42","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\DisplayProficiencies.jsx":"43","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\IndividualClass.jsx":"44","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\spells\\SpellDisplay.js":"45","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\subclasses\\SubClass.jsx":"46","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\features\\Feature.jsx":"47","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\StartingEquipment.jsx":"48","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\monsters\\DisplayMonster.jsx":"49","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\DisplayRace.jsx":"50","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\Classes.jsx":"51","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\profile\\displayCharacters\\DisplayUserCharacters.jsx":"52","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\profile\\displayUser\\UserProfile.jsx":"53","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\Skill.jsx":"54","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\subclasses\\DisplaySubClass.jsx":"55","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\subclasses\\SubClassSpells.jsx":"56","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\DisplayClass.jsx":"57","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\Subclass.jsx":"58","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCasting.jsx":"59","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\SavingThrows.jsx":"60","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\Proficiencies.jsx":"61","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\features\\DisplayFeatures.jsx":"62","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\features\\FeatureChoice.jsx":"63","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\Choices.jsx":"64","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\DisplayClass.jsx":"65","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\PChoices.jsx":"66","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCastingInfo.jsx":"67","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCastingDesc.jsx":"68"},{"size":614,"mtime":1611633674163,"results":"69","hashOfConfig":"70"},{"size":375,"mtime":1611633674164,"results":"71","hashOfConfig":"70"},{"size":627,"mtime":1612107443783,"results":"72","hashOfConfig":"70"},{"size":277,"mtime":1611633674164,"results":"73","hashOfConfig":"70"},{"size":359,"mtime":1611891279365,"results":"74","hashOfConfig":"70"},{"size":5684,"mtime":1612107561407,"results":"75","hashOfConfig":"70"},{"size":3511,"mtime":1612022951228,"results":"76","hashOfConfig":"70"},{"size":12041,"mtime":1612110835537,"results":"77","hashOfConfig":"70"},{"size":756,"mtime":1611964972979,"results":"78","hashOfConfig":"70"},{"size":1835,"mtime":1611964972980,"results":"79","hashOfConfig":"70"},{"size":2392,"mtime":1611964972980,"results":"80","hashOfConfig":"70"},{"size":8402,"mtime":1612063952950,"results":"81","hashOfConfig":"70"},{"size":384,"mtime":1611969514121,"results":"82","hashOfConfig":"70"},{"size":4224,"mtime":1611964972981,"results":"83","hashOfConfig":"70"},{"size":1966,"mtime":1611976235988,"results":"84","hashOfConfig":"70"},{"size":27168,"mtime":1612110863957,"results":"85","hashOfConfig":"70"},{"size":715,"mtime":1611976553243,"results":"86","hashOfConfig":"70"},{"size":5656,"mtime":1612022951216,"results":"87","hashOfConfig":"70"},{"size":2103,"mtime":1611964973008,"results":"88","hashOfConfig":"70"},{"size":9557,"mtime":1611964973008,"results":"89","hashOfConfig":"70"},{"size":2867,"mtime":1611964973009,"results":"90","hashOfConfig":"70"},{"size":2127,"mtime":1611964973009,"results":"91","hashOfConfig":"70"},{"size":1220,"mtime":1611964973009,"results":"92","hashOfConfig":"70"},{"size":1358,"mtime":1611976235987,"results":"93","hashOfConfig":"70"},{"size":7348,"mtime":1611976235986,"results":"94","hashOfConfig":"70"},{"size":2103,"mtime":1611964973006,"results":"95","hashOfConfig":"70"},{"size":1474,"mtime":1612107261081,"results":"96","hashOfConfig":"70"},{"size":1135,"mtime":1611964973007,"results":"97","hashOfConfig":"70"},{"size":15029,"mtime":1612107752412,"results":"98","hashOfConfig":"70"},{"size":26197,"mtime":1612063952942,"results":"99","hashOfConfig":"70"},{"size":5429,"mtime":1612063952941,"results":"100","hashOfConfig":"70"},{"size":1535,"mtime":1611976553246,"results":"101","hashOfConfig":"70"},{"size":1353,"mtime":1612022951192,"results":"102","hashOfConfig":"70"},{"size":800,"mtime":1612045932580,"results":"103","hashOfConfig":"70"},{"size":1118,"mtime":1612066494255,"results":"104","hashOfConfig":"70"},{"size":2959,"mtime":1612066494252,"results":"105","hashOfConfig":"70"},{"size":3954,"mtime":1612066494236,"results":"106","hashOfConfig":"70"},{"size":1103,"mtime":1612066494232,"results":"107","hashOfConfig":"70"},{"size":3424,"mtime":1612066494244,"results":"108","hashOfConfig":"70"},{"size":1138,"mtime":1612066494248,"results":"109","hashOfConfig":"70"},{"size":1485,"mtime":1612066494240,"results":"110","hashOfConfig":"70"},{"size":1998,"mtime":1612066494259,"results":"111","hashOfConfig":"70"},{"size":3218,"mtime":1612066494202,"results":"112","hashOfConfig":"70"},{"size":6247,"mtime":1612066494206,"results":"113","hashOfConfig":"70"},{"size":330,"mtime":1611976235988,"results":"114","hashOfConfig":"70"},{"size":333,"mtime":1611895223704,"results":"115","hashOfConfig":"70"},{"size":324,"mtime":1611895223699,"results":"116","hashOfConfig":"70"},{"size":385,"mtime":1611895223702,"results":"117","hashOfConfig":"70"},{"size":337,"mtime":1611952069045,"results":"118","hashOfConfig":"70"},{"size":1515,"mtime":1611876263392,"results":"119","hashOfConfig":"70"},{"size":1103,"mtime":1612066494193,"results":"120","hashOfConfig":"70"},{"size":1454,"mtime":1612107697713,"results":"121","hashOfConfig":"70"},{"size":513,"mtime":1611964973008,"results":"122","hashOfConfig":"70"},{"size":1622,"mtime":1611976553245,"results":"123","hashOfConfig":"70"},{"size":386,"mtime":1611964973003,"results":"124","hashOfConfig":"70"},{"size":634,"mtime":1611944980020,"results":"125","hashOfConfig":"70"},{"size":398,"mtime":1611964973001,"results":"126","hashOfConfig":"70"},{"size":305,"mtime":1611964973000,"results":"127","hashOfConfig":"70"},{"size":750,"mtime":1612022951204,"results":"128","hashOfConfig":"70"},{"size":310,"mtime":1611964972992,"results":"129","hashOfConfig":"70"},{"size":584,"mtime":1611944980016,"results":"130","hashOfConfig":"70"},{"size":384,"mtime":1611944980017,"results":"131","hashOfConfig":"70"},{"size":335,"mtime":1612066494216,"results":"132","hashOfConfig":"70"},{"size":496,"mtime":1612066494198,"results":"133","hashOfConfig":"70"},{"size":383,"mtime":1611964972983,"results":"134","hashOfConfig":"70"},{"size":355,"mtime":1611944980016,"results":"135","hashOfConfig":"70"},{"size":488,"mtime":1612066494212,"results":"136","hashOfConfig":"70"},{"size":206,"mtime":1612066494209,"results":"137","hashOfConfig":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"puc3y2",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"140"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"140"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"140"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"140"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"140"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"140"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"140"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"140"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"140"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"140"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"140"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"140"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"140"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"140"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"140"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"140"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"140"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"140"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"295"},"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\index.js",[],["296","297"],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\reportWebVitals.js",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\App.js",["298"],"import React, { Component } from 'react'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\n\r\nimport Routes from './Routes/Routes'\r\nimport NavBar from './components/navbar/Navbar'\r\nimport ScrollToTop from './helper/scroll-to-top'\r\n\r\n// global styles\r\nimport './css/global-styles.css'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          {/* <ScrollToTop> */}\r\n          <header>\r\n            <NavBar />\r\n          </header>\r\n          <Routes />\r\n          {/* </ScrollToTop> */}\r\n        </Router>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\redux\\store.js",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\helper\\scroll-to-top.js",["299"],"import React, { Component } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass ScrollToTop extends Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      window.scrollTo(0, 0)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default withRouter(ScrollToTop)\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\Routes\\Routes.jsx",["300"],"import React from 'react'\r\n\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\n// Main Imports\r\nimport Homepage from '../components/Homepage'\r\nimport AllCharacters from '../components/AllCharacters'\r\n// Clases Imports\r\nimport Classes from '../components/classes/Classes'\r\nimport IndividualClass from '../components/classes/classes/displayClass/individualClass/IndividualClass'\r\nimport SubClasses from '../components/classes/subclasses/SubClasses'\r\nimport IndividualSubClass from '../components/classes/subclasses/IndividualSubClass'\r\nimport Features from '../components/classes/features/Features'\r\nimport IndividualFeature from '../components/classes/features/IndividualFeature'\r\nimport StartingEquipments from '../components/classes/startingEquipment/StartingEquipments'\r\nimport IndividualEquipment from '../components/classes/startingEquipment/IndividualEquipment'\r\nimport DisplayProficiencies from '../components/classes/classes/displayClass/individualClass/DisplayProficiencies'\r\nimport ClassLevels from '../components/classes/classes/displayClass/individualClass/ClassLevels'\r\nimport Skills from '../components/classes/classes/displayClass/individualClass/Skills'\r\nimport DisplayEquipment from '../components/classes/startingEquipment/DisplayEquipment'\r\nimport AllEquipment from '../components/classes/startingEquipment/AllEquipment'\r\n// Races Imports\r\nimport Races from '../components/races/Races'\r\nimport IndividualRace from '../components/races/IndividualRace'\r\nimport Bonus from '../components/races/Bonus'\r\nimport Spells from '../components/spells/Spells'\r\nimport Language from '../components/races/Language'\r\nimport Trait from '../components/races/Trait'\r\nimport IndividualSpell from '../components/spells/IndividualSpell'\r\nimport Proficiency from '../components/races/Proficiency'\r\n// Monsters Imports\r\nimport Monsters from '../components/monsters/Monsters'\r\nimport IndividualMonster from '../components/monsters/IndividualMonster'\r\nimport ConditionImmunity from '../components/monsters/ConditionImmunity'\r\n// Create Character Imports\r\nimport CreateCharacter from '../components/characterCreation/CreateCharacter'\r\nimport CharacterCreationForm from '../components/characterCreation/CharacterCreationForm'\r\nimport ClassSpells from '../components/classes/classes/displayClass/individualClass/ClassSpells'\r\n// Builds Folder\r\nimport Builds from '../components/builds/Builds'\r\nimport DisplayCharacter from '../components/builds/DisplayCharacter'\r\n// SignUp form\r\nimport SignUpForm from '../components/SignUpForm'\r\n// userprofile\r\nimport Profile from '../components/profile/Profile'\r\n// Login Form\r\nimport LoginForm from '../components/LoginPage'\r\nconst Routes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Homepage} />\r\n      <Route path=\"/builds\" component={Builds} />\r\n      <Route path=\"/character/:id\" component={DisplayCharacter} />\r\n      <Route path=\"/allCharacters\" component={AllCharacters} />\r\n      <Route exact path=\"/classes\" component={Classes} />\r\n      <Route exact path=\"/class/:index\" component={IndividualClass} />\r\n      <Route exact path=\"/subclasses\" component={SubClasses} />\r\n      <Route exact path=\"/subclass/:index\" component={IndividualSubClass} />\r\n      <Route path=\"/feature/:index\" component={IndividualFeature} />\r\n      <Route exact path=\"/features\" component={Features} />\r\n      <Route\r\n        exact\r\n        path=\"/starting-equipment/:index\"\r\n        component={IndividualEquipment}\r\n      />\r\n      <Route exact path=\"/starting-equipments\" component={StartingEquipments} />\r\n      {/* RACE PROFICIENCY ROUTE NEEDS TO BE HERE TO FUNCTION; yes, the below classes proficieny route still works, i checked */}\r\n      <Route path=\"/races/proficiencies/:proficiency\" component={Proficiency} />\r\n      {/* END RACE PROFICIENY ROUTE FIX */}\r\n      <Route\r\n        exact\r\n        path=\"/proficiencies/:index\"\r\n        component={DisplayProficiencies}\r\n      />\r\n      <Route exact path=\"/class/:index/levels\" component={ClassLevels} />\r\n      <Route path=\"/skills/:index\" component={Skills} />\r\n      <Route path=\"/classSpells/:index/spells\" component={ClassSpells} />\r\n      <Route path=\"/equipment/:index\" component={DisplayEquipment} />\r\n      <Route path=\"/allequipment\" component={AllEquipment} />\r\n      {/* RACES ROUTES BELOW */}\r\n      <Route path=\"/races/:race\" component={IndividualRace} />\r\n      <Route eaxct path=\"/races\" component={Races} />\r\n      <Route path=\"/bonus/:bonus\" component={Bonus} />\r\n      <Route path=\"/spells/:spell\" component={IndividualSpell} />\r\n      <Route eaxct path=\"/spells\" component={Spells} />\r\n      <Route path=\"/languages/:language\" component={Language} />\r\n      <Route path=\"/traits/:trait\" component={Trait} />\r\n      {/* <Route path=\"/races/proficiencies/:proficiency\" component={Proficiency} /> */}\r\n      {/* END OF RACES ROUTES */}\r\n\r\n      {/* MONSTERS ROUTES BELOW */}\r\n      <Route path=\"/monsters/:monster\" component={IndividualMonster} />\r\n      <Route exact path=\"/monsters\" component={Monsters} />\r\n      <Route\r\n        path=\"/conditionImmunity/:condition\"\r\n        component={ConditionImmunity}\r\n      />\r\n      {/* END OF MONSTERS ROUTES */}\r\n\r\n      {/* CREATE CHARACTER ROUTES */}\r\n      {/* <Route path=\"/createCharacter\" component={CreateCharacter} /> */}\r\n      <Route path=\"/CharacterCreation\" component={CharacterCreationForm} />\r\n      {/* END OF CREATE CHARACTER ROUTES */}\r\n\r\n      {/* SIGNUP FORM */}\r\n      <Route path=\"/signup\" component={SignUpForm} />\r\n      <Route path=\"/userprofile\" component={Profile} />\r\n\r\n      {/* LOGIN FORM */}\r\n      <Route path=\"/login\" component={LoginForm} />\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default Routes\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\navbar\\Navbar.jsx",["301"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { logoutUser } from '../../redux/reducers'\r\nimport '../../css/Navbar.css'\r\nclass Navbar extends React.Component {\r\n  render() {\r\n    let bool = false\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/\" style={{ textDecoration: 'none' }}>Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/classes\" style={{ textDecoration: 'none' }}>Classes</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/races\" style={{ textDecoration: 'none' }}>Races</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/spells\" style={{ textDecoration: 'none' }}>Spells</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/monsters\" style={{ textDecoration: 'none' }}>Monsters</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/builds\">Characters</Link>\r\n              </li>\r\n\r\n              {this.props.currentUser !== undefined ? (\r\n                this.props.currentUser.token !== undefined ? (\r\n                  <li className=\"nav-item\">\r\n                    <Link to=\"/CharacterCreation\" style={{ textDecoration: 'none' }}>Create Character</Link>\r\n                  </li>\r\n                ) : (\r\n                  <span />\r\n                )\r\n              ) : (\r\n                <span />\r\n              )}\r\n\r\n              <div id=\"dropdown\" className=\"dropdown\">\r\n                <li className=\"dropbtn\">Profile</li>\r\n                <div className=\"dropdown-content\">\r\n                  {this.props.currentUser ? (\r\n                    <span>\r\n                      <Link to=\"/userprofile\" style={{ textDecoration: 'none' }}>User Profile</Link>\r\n                      <Link to=\"/\" onClick={(e) => this.props.logoutUser()} style={{ textDecoration: 'none' }}>\r\n                        Logout\r\n                      </Link>\r\n                    </span>\r\n                  ) : (\r\n                    <span>\r\n                      <Link to=\"/signup\" style={{ textDecoration: 'none' }}>Sign Up</Link>\r\n                      <Link to=\"/login\" style={{ textDecoration: 'none' }}>Login</Link>\r\n                    </span>\r\n                  )}\r\n\r\n                  {/* {this.props.currentUser !== undefined ? (\r\n                    this.props.currentUser.token !== undefined ? (\r\n                      <Link to=\"/\" onClick={(e) => this.props.logoutUser()}>\r\n                        Logout\r\n                      </Link>\r\n                    ) : (\r\n                      <span />\r\n                    )\r\n                  ) : (\r\n                    <span />\r\n                  )} */}\r\n                </div>\r\n              </div>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.currentLoggedInUserInfo,\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    logoutUser: () => dispatch(logoutUser()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar)\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\redux\\reducers\\index.js",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\AllCharacters.js",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\Homepage.js",["302"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getAllClasses } from '../redux/reducers'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport '../css/homepage.css'\r\nclass Homepage extends Component {\r\n  async componentDidMount() {\r\n    await this.props.getAllClasses()\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"homepage\">\r\n        {/* <div className=\"pls-work-img\">\r\n          <img\r\n            src=\"https://wallpapercave.com/wp/wp2227193.jpg\"\r\n            alt=\"main-img\"\r\n            width=\"100%\"\r\n            z-index=\"-1\"\r\n          />\r\n        </div> */}\r\n        <img\r\n          className=\"home-page-logo\"\r\n          src=\"https://dragonfirethegame.com/wp-content/uploads/2017/04/logo-dnd.png\"\r\n        ></img>\r\n\r\n        {this.props.currentUser ? (\r\n          <div>\r\n            <Link to=\"CharacterCreation\">\r\n              <button className=\"chara-create-btn\">Create A Character!</button>{' '}\r\n            </Link>\r\n          </div>\r\n        ) : (\r\n          <div className=\"maybe-fix-2\">\r\n            <Link to=\"/login\">\r\n              <button className=\"login-btn\">Login To Create Character</button>\r\n            </Link>\r\n            <Link to=\"/signup\">\r\n              <button className=\"signup-btn\">Sign Up To Create Account</button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapState = (state) => {\r\n  return {\r\n    classes: state.classes,\r\n    currentUser: state.currentLoggedInUserInfo,\r\n  }\r\n}\r\n\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    getAllClasses: () => dispatch(getAllClasses()),\r\n  }\r\n}\r\nexport default connect(mapState, mapDispatch)(Homepage)\r\n\r\n// we should get the values on the \"create your chara\" page b/c\r\n// if the user refreshes on that page, state will be reset and\r\n// the options will be blank\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\LoginPage.js",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\spells\\IndividualSpell.js",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\characterCreation\\CreateCharacter.js",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\SignUpForm.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\spells\\Spells.jsx",["303"],"import { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { connect } from 'react-redux'\r\nimport { getApiData } from '../../redux/reducers'\r\n\r\nimport SpellDisplay from './SpellDisplay'\r\n\r\nimport '../../css/spells.css'\r\n\r\nclass Spells extends Component {\r\n  state = {\r\n    spell: [],\r\n  }\r\n\r\n  // async componentDidMount() {\r\n  //     try{\r\n  //         let spellName = await axios.get(\"https://www.dnd5eapi.co/api/spells\")\r\n  //         this.setState({\r\n  //             spell: spellName.data.results\r\n  //         })\r\n\r\n  //     }catch(error) {\r\n  //         console.error(error);\r\n  //     }\r\n  // }\r\n\r\n  componentDidMount = async () => {\r\n    this.fetchSpells('spells')\r\n  }\r\n  fetchSpells = async (searchApi) => {\r\n    await this.props.getApiData(searchApi)\r\n\r\n    setTimeout(() => {\r\n      this.setState({\r\n        spell: this.props.spell.results,\r\n      })\r\n    }, 200)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"spells-container\">\r\n        <div className=\"spells-title\">\r\n          <h1>Spells</h1>\r\n        </div>\r\n        {this.state.spell !== undefined ? (\r\n          <div className=\"spells-preview-container\">\r\n            {this.state.spell.map((spell, index) => (\r\n              <SpellDisplay key={index} name={spell.name} index={spell.index} />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <span />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // render(){\r\n  //     return(\r\n  //         <div>\r\n  //             <h1>Spell</h1>\r\n  //             {this.state.spell.map((spell,index) => (\r\n  //                 <SpellDisplay key={index} name={spell.name} />\r\n  //             ))}\r\n\r\n  //         </div>\r\n  //     )\r\n  // }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    spell: state.dndData,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getApiData: (searchApi) => dispatch(getApiData(searchApi)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Spells)\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\characterCreation\\CharacterCreationForm.jsx",["304"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  getAllClasses,\r\n  getAllRaces,\r\n  getAllSkills,\r\n  createCharacter,\r\n  updateCharacter,\r\n} from '../../redux/reducers'\r\nimport '../../css/charactercreation.css'\r\nclass CharacterCreationForm extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      characterInfo: {\r\n        characterName: '',\r\n        class: '',\r\n        race: '',\r\n        gender: '',\r\n        proficiencyBonus: '2',\r\n        armorClass: 10,\r\n        initiative: 0,\r\n        speed: 0,\r\n        skills: [],\r\n        str: Math.floor(Math.random() * 20),\r\n        dex: Math.floor(Math.random() * 20),\r\n        con: Math.floor(Math.random() * 20),\r\n        int: Math.floor(Math.random() * 20),\r\n        wis: Math.floor(Math.random() * 20),\r\n        cha: Math.floor(Math.random() * 20),\r\n        personalityTraits: '',\r\n        flaws: '',\r\n        ideals: '',\r\n        bonds: '',\r\n        attacksAndSpellcasting: '',\r\n        featuresAndTraits: '',\r\n        equipment: '',\r\n        profAndLang: '',\r\n        userId: '',\r\n      },\r\n      public: true,\r\n      editing: this.props.location.state\r\n        ? this.props.location.state.editing\r\n        : false, // using a Link we can pass a location.state, if this component is not linked to, this local state is false\r\n      updatingCharacterId: this.props.location.state\r\n        ? this.props.location.state.updatingCharacterId\r\n        : '', // id of character being updated, if editing is true, this value MUST be true, as in it has a valid id.\r\n      oldCharacterInfo: this.props.location.state\r\n        ? this.props.location.state.oldCharacterInfo\r\n        : '',\r\n    }\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.props.getAllClasses()\r\n    await this.props.getAllRaces()\r\n    await this.props.getAllSkills()\r\n    if (this.state.oldCharacterInfo) {\r\n      const {\r\n        name,\r\n        race,\r\n        gender,\r\n        armorClass,\r\n        speed,\r\n        skill1,\r\n        skill2,\r\n        skill3,\r\n        skill4,\r\n        str,\r\n        dex,\r\n        con,\r\n        int,\r\n        wis,\r\n        cha,\r\n        personalityTraits,\r\n        flaws,\r\n        ideals,\r\n        bonds,\r\n        attacksAndSpellcasting,\r\n        featuresAndTraits,\r\n        equipment,\r\n        profAndLang,\r\n      } = this.state.oldCharacterInfo\r\n      const charaClass = this.state.oldCharacterInfo.class\r\n\r\n      console.log('GENDER DESTRUC:', gender)\r\n\r\n      this.setState({\r\n        characterInfo: {\r\n          characterName: name,\r\n          class: charaClass,\r\n          race: race,\r\n          gender: gender,\r\n          proficiencyBonus: '2',\r\n          armorClass: armorClass,\r\n          initiative: 0,\r\n          speed: speed,\r\n          skills: [skill1, skill2, skill3, skill4],\r\n          str: str,\r\n          dex: dex,\r\n          con: con,\r\n          int: int,\r\n          wis: wis,\r\n          cha: cha,\r\n          personalityTraits: personalityTraits,\r\n          flaws: flaws,\r\n          ideals: ideals,\r\n          bonds: bonds,\r\n          attacksAndSpellcasting: attacksAndSpellcasting,\r\n          featuresAndTraits: featuresAndTraits,\r\n          equipment: equipment,\r\n          profAndLang: profAndLang,\r\n          userId: '',\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  handleClassSelectChange = (e) => {\r\n    this.setState({\r\n      characterInfo: {\r\n        ...this.state.characterInfo,\r\n        class: e.target.value,\r\n      },\r\n    })\r\n  }\r\n\r\n  handleRaceSelectChange = (e) => {\r\n    const { value } = e.target\r\n\r\n    if (\r\n      value === 'dragonborn' ||\r\n      value === 'elf' ||\r\n      value === 'half-elf' ||\r\n      value === 'half-orc' ||\r\n      value === 'human' ||\r\n      value === 'tiefling'\r\n    ) {\r\n      this.setState({\r\n        characterInfo: {\r\n          ...this.state.characterInfo,\r\n          race: e.target.value,\r\n          speed: 30,\r\n        },\r\n      })\r\n    } else {\r\n      this.setState({\r\n        characterInfo: {\r\n          ...this.state.characterInfo,\r\n          race: e.target.value,\r\n          speed: 25,\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  handleGenderSelectChange = (e) => {\r\n    this.setState({\r\n      characterInfo: {\r\n        ...this.state.characterInfo,\r\n        gender: e.target.value,\r\n      },\r\n    })\r\n  }\r\n\r\n  handleSkillsSelectChange = (e) => {\r\n    if (this.state.characterInfo.skills.length === 4) {\r\n      alert('You may only have 4 skills per character!')\r\n      return\r\n    }\r\n    for (const skill of this.state.characterInfo.skills) {\r\n      if (skill === e.target.value) {\r\n        alert('No duplicate skills allowed!')\r\n        return\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      characterInfo: {\r\n        ...this.state.characterInfo,\r\n        skills: [...this.state.characterInfo.skills, e.target.value], // append skill to array\r\n      },\r\n    })\r\n  }\r\n\r\n  handleAbilityScoreChange = (e) => {\r\n    let modifier = Math.floor((parseInt(e.target.value) - 10) / 2)\r\n    document.getElementById(`${e.target.name}` + '-modifier').innerHTML =\r\n      '+' + modifier\r\n\r\n    if (e.target.name === 'dex') {\r\n      this.setState({\r\n        characterInfo: {\r\n          ...this.state.characterInfo,\r\n          [e.target.name]: e.target.value,\r\n          armorClass: 10 + modifier,\r\n        },\r\n      })\r\n    } else {\r\n      this.setState({\r\n        characterInfo: {\r\n          ...this.state.characterInfo,\r\n          [e.target.name]: e.target.value,\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  handleMainStatChange = (e) => {\r\n    this.setState({\r\n      characterInfo: {\r\n        ...this.state.characterInfo,\r\n        [e.target.name]: e.target.value,\r\n      },\r\n    })\r\n  }\r\n\r\n  handleDisplayStatusChange = (e) => {\r\n    this.setState({\r\n      public: e.target.value,\r\n    })\r\n  }\r\n\r\n  handleTextareaChange = (e) => {\r\n    this.setState({\r\n      characterInfo: {\r\n        ...this.state.characterInfo,\r\n        [e.target.name]: e.target.value,\r\n      },\r\n    })\r\n  }\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault()\r\n    // console.log('AAAAAAAAAAAAAAAAAA')\r\n    // console.log('SUBMIT CHARA INFO:', this.state.characterInfo)\r\n    /*  const { str, dex, con, wis, int, cha } = this.state\r\n     if ( ( str || dex || con || wis || int || cha ) > 30 || ( str || dex || con || wis || int || cha ) < 0 ) {\r\n       alert( \"Characters Attritbutes Are Maxed at 30\" )\r\n     }\r\n     else { */\r\n    // console.log('BBBBBBBBBBBBBBBBBBBB')\r\n    if (this.state.public === 'false') {\r\n      this.setState({\r\n        characterInfo: {\r\n          ...this.state.characterInfo,\r\n          userId: this.props.currentUser.userId,\r\n        },\r\n      })\r\n    } else {\r\n      delete this.state.characterInfo.userId\r\n    }\r\n\r\n    // console.log('CCCCCCCCCCCCCCCCCCC')\r\n    // setTimeout(() => {\r\n    //   this.props.createCharacter(\r\n    //     this.state.characterInfo,\r\n    //     this.props.currentUser.token\r\n    //   )\r\n    // }, 1200)\r\n\r\n    // console.log('DDDDDDDDDDDDDDDDDDDDDD')\r\n    // console.log(\r\n    //   'THIS.STATE.EDITING BEFORE SUBMSSION FINALIZATION:',\r\n    //   this.state.editing\r\n    // )\r\n\r\n    // console.log('EEEEEEEEEEEEEEEEEEEEEEEE')\r\n    setTimeout(() => {\r\n      if (this.state.editing) {\r\n        // console.log('SENDING FORM INFO TO UPDATE CHARA REDUX  =====')\r\n        this.props.updateCharacter(\r\n          this.state.characterInfo,\r\n          this.state.updatingCharacterId\r\n        )\r\n      } else {\r\n        // console.log('SENDING FORM INFO TO CREATE CHARA REDUX  ++++++')\r\n        this.props.createCharacter(\r\n          this.state.characterInfo,\r\n          this.props.currentUser.token\r\n        )\r\n      }\r\n    }, 1200)\r\n\r\n    setTimeout(() => {\r\n      if (\r\n        this.props.newCharacter !== undefined ||\r\n        this.props.currentUpdatedCharacter !== undefined\r\n      ) {\r\n        if (this.state.public === 'true') {\r\n          this.props.history.push('/builds')\r\n        } else {\r\n          this.props.history.push('/userprofile')\r\n        }\r\n      }\r\n    }, 2000)\r\n    /* } */\r\n  }\r\n\r\n  render() {\r\n    /*  console.log('this.state.editing:', this.state.editing)\r\n    console.log(\r\n      'this.state.updatingCharacterId:',\r\n      this.state.updatingCharacterId\r\n    )\r\n    console.log('old chara info:', this.state.oldCharacterInfo)\r\n\r\n    console.log('chara info test:', this.state.characterInfo) */\r\n    // console.log('OLD CHARA INFO:', this.state.oldCharacterInfo)\r\n    // console.log('RENDER CHARA INFO:', this.state.characterInfo)\r\n    // console.log('this.state.public:', this.state.public)\r\n    return (\r\n      <div className=\"creation-form\">\r\n        {this.state.editing ? (\r\n          <header>DUNGEONS {'&'} DRAGONS CHARACTER EDIT FORM</header>\r\n        ) : (\r\n          <header>DUNGEONS {'&'} DRAGONS CHARACTER CREATION FORM</header>\r\n        )}\r\n\r\n        <div id=\"character-creation-form\">\r\n          {/* Main Character Creation Form */}\r\n          <form onSubmit={(e) => this.handleFormSubmit(e)}>\r\n            {/* Character Name */}\r\n            <div id=\"character-creation-name\">\r\n              <label>\r\n                Character Name:<br></br>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"characterName\"\r\n                  // placeholder=\"Raffaela Ciccone\"\r\n                  value={this.state.characterInfo.characterName}\r\n                  onChange={(e) =>\r\n                    this.setState({\r\n                      characterInfo: {\r\n                        ...this.state.characterInfo,\r\n                        characterName: e.target.value,\r\n                      },\r\n                    })\r\n                  }\r\n                  required\r\n                ></input>\r\n              </label>\r\n            </div>\r\n            <br></br>\r\n            {/* End Character Name */}\r\n\r\n            {/* Class Select */}\r\n            <div id=\"class-select\">\r\n              <label>\r\n                Select Your Classes<br></br>\r\n                <select\r\n                  name=\"classSelect\"\r\n                  onChange={(e) => this.handleClassSelectChange(e)}\r\n                  required\r\n                >\r\n                  <option value=\"\">--Choose Your Class--</option>\r\n                  {this.props.allClasses !== undefined ? (\r\n                    this.props.allClasses.map((element, index) => {\r\n                      if (element.index === this.state.characterInfo.class) {\r\n                        return (\r\n                          <option\r\n                            selected=\"selected\"\r\n                            key={index}\r\n                            value={element.index}\r\n                          >\r\n                            {element.name}\r\n                          </option>\r\n                        )\r\n                      } else {\r\n                        return (\r\n                          <option key={index} value={element.index}>\r\n                            {element.name}\r\n                          </option>\r\n                        )\r\n                      }\r\n                    })\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n                </select>\r\n              </label>\r\n            </div>\r\n            {/* End Class Select */}\r\n\r\n            <br></br>\r\n            {/* Race Select */}\r\n            <div id=\"race-select\">\r\n              <label>\r\n                Select Your Race\r\n                <br></br>\r\n                <select\r\n                  name=\"raceSelect\"\r\n                  onChange={(e) => this.handleRaceSelectChange(e)}\r\n                  required\r\n                >\r\n                  <option value=\"\">--Choose Your Race--</option>\r\n                  {this.props.allRaces !== undefined ? (\r\n                    this.props.allRaces.map((element, index) => {\r\n                      if (element.index === this.state.characterInfo.race) {\r\n                        return (\r\n                          <option\r\n                            selected=\"selected\"\r\n                            key={index}\r\n                            value={element.index}\r\n                          >\r\n                            {element.name}\r\n                          </option>\r\n                        )\r\n                      } else {\r\n                        return (\r\n                          <option key={index} value={element.index}>\r\n                            {element.name}\r\n                          </option>\r\n                        )\r\n                      }\r\n                    })\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n                </select>\r\n              </label>\r\n            </div>\r\n            {/* End Race Select */}\r\n\r\n            <br></br>\r\n            {/* Gender Select */}\r\n            <div id=\"gender-choices\">\r\n              {this.state.characterInfo.gender === 'male' ? (\r\n                <div className=\"gender-male\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    checked=\"checked\"\r\n                    id=\"male\"\r\n                    name=\"gender\"\r\n                    value=\"male\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label htmlFor=\"male\">Male</label>\r\n                </div>\r\n              ) : (\r\n                <div className=\"gender-male\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"male\"\r\n                    name=\"gender\"\r\n                    value=\"male\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label htmlFor=\"male\">Male</label>\r\n                </div>\r\n              )}\r\n\r\n              {this.state.characterInfo.gender === 'female' ? (\r\n                <div className=\"gender-female\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    checked=\"checked\"\r\n                    id=\"female\"\r\n                    name=\"gender\"\r\n                    value=\"female\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label>Female</label>\r\n                </div>\r\n              ) : (\r\n                <div className=\"gender-female\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"female\"\r\n                    name=\"gender\"\r\n                    value=\"female\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label>Female</label>\r\n                </div>\r\n              )}\r\n\r\n              {this.state.characterInfo.gender === 'other' ? (\r\n                <div className=\"gender-other\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    checked=\"checked\"\r\n                    id=\"other\"\r\n                    name=\"gender\"\r\n                    value=\"other\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label htmlFor=\"other\">Other</label>\r\n                </div>\r\n              ) : (\r\n                <div className=\"gender-other\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"other\"\r\n                    name=\"gender\"\r\n                    value=\"other\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label htmlFor=\"other\">Other</label>\r\n                </div>\r\n              )}\r\n            </div>\r\n            {/* End Gender Select  */}\r\n\r\n            {/* Main Stats */}\r\n            <div id=\"character-prof-bonus\">\r\n              <label>\r\n                Proficiency Bonus (+2 For Lvl.1) :\r\n                <span\r\n                  id=\"proficiencyBonus-display\"\r\n                  // type=\"number\"\r\n                  name=\"proficiencyBonus\"\r\n                  // placeholder={Math.floor(Math.random() * 6)}\r\n                  // defaultValue={Math.floor(Math.random() * 6)}\r\n                  value=\"2\"\r\n                  onChange={(e) =>\r\n                    alert('A lvl.1 character has +2 proficieny bonus!')\r\n                  }\r\n                  required\r\n                >\r\n                  {' '}\r\n                  {this.state.characterInfo.proficiencyBonus}\r\n                </span>\r\n              </label>\r\n            </div>\r\n            <div id=\"other-main-stats\">\r\n              <label>\r\n                Armor Class :\r\n                <span\r\n                  id=\"armorClass-display\"\r\n                  type=\"number\"\r\n                  name=\"armorClass\"\r\n                  required\r\n                >\r\n                  {' '}\r\n                  {this.state.characterInfo.armorClass}\r\n                </span>\r\n              </label>\r\n\r\n              <br></br>\r\n              <label>\r\n                Speed :\r\n                <span\r\n                  id=\"speed-display\"\r\n                  type=\"number\"\r\n                  name=\"speed\"\r\n                  value={this.state.characterInfo.speed}\r\n                  required\r\n                >\r\n                  {' '}\r\n                  {this.state.characterInfo.speed}\r\n                </span>\r\n              </label>\r\n              <br></br>\r\n            </div>\r\n            {/* End Main Stats */}\r\n\r\n            {/* Skill Select */}\r\n            <div id=\"select-character-skill\">\r\n              <label>\r\n                Select Your Skills (Choose up to 4)\r\n                <br></br>\r\n                <select\r\n                  name=\"skillsSelect\"\r\n                  onChange={(e) => this.handleSkillsSelectChange(e)}\r\n                  required\r\n                >\r\n                  {this.state.editing ? (\r\n                    <option value=\"Add more skills\">\r\n                      --Add More Skills?--\r\n                    </option>\r\n                  ) : (\r\n                    <option value=\"Choose Your Skills\">\r\n                      --Choose Your Skills--\r\n                    </option>\r\n                  )}\r\n                  {this.props.allSkills !== undefined ? (\r\n                    this.props.allSkills.map((element, index) => {\r\n                      return (\r\n                        <option key={index} value={element.index}>\r\n                          {element.name}\r\n                        </option>\r\n                      )\r\n                    })\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n                </select>\r\n              </label>\r\n            </div>\r\n            {/* End Skill Select */}\r\n\r\n            <br></br>\r\n            {/* Ability Scores */}\r\n            <div id=\"character-attributes\">\r\n              <div id=\"str\">\r\n                <label>\r\n                  Strength\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"str\"\r\n                    value={this.state.characterInfo.str}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"str-modifier\"></span>\r\n                </label>\r\n              </div>\r\n              <div id=\"con\">\r\n                <label>\r\n                  Constitution\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"con\"\r\n                    value={this.state.characterInfo.con}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"con-modifier\"></span>\r\n                </label>\r\n              </div>\r\n              <div id=\"dex\">\r\n                <label>\r\n                  Dexterity\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"dex\"\r\n                    value={this.state.characterInfo.dex}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"dex-modifier\"></span>\r\n                </label>\r\n              </div>\r\n              <div id=\"cha\">\r\n                <label>\r\n                  Charisma\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"cha\"\r\n                    value={this.state.characterInfo.cha}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"cha-modifier\"></span>\r\n                </label>\r\n              </div>\r\n              <div id=\"int\">\r\n                <label>\r\n                  Intelligence\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"int\"\r\n                    value={this.state.characterInfo.int}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"int-modifier\"></span>\r\n                </label>\r\n              </div>\r\n              <div id=\"wis\">\r\n                <label>\r\n                  Wisdom\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"wis\"\r\n                    value={this.state.characterInfo.wis}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"wis-modifier\"></span>\r\n                </label>\r\n              </div>\r\n            </div>\r\n\r\n            <div id=\"personality-traits\">\r\n              <h3>Personality Traits</h3>\r\n              <textarea\r\n                name=\"personalityTraits\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.personalityTraits}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"flaws\">\r\n              <h3>Flaws</h3>\r\n              <textarea\r\n                name=\"flaws\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.flaws}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"ideals\">\r\n              <h3>Ideals</h3>\r\n              <textarea\r\n                name=\"ideals\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.ideals}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"bonds\">\r\n              <h3>Bonds</h3>\r\n              <textarea\r\n                name=\"bonds\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.bonds}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"attacks-and-spellcasting\">\r\n              <h3>Attacks {'&'} Spellcasting</h3>\r\n              <textarea\r\n                name=\"attacksAndSpellcasting\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.attacksAndSpellcasting}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"features-and-traits\">\r\n              <h3>Features {'&'} Traits</h3>\r\n              <textarea\r\n                name=\"featuresAndTraits\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.featuresAndTraits}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"equipment-cc\">\r\n              <h3>Equipment</h3>\r\n              <textarea\r\n                name=\"equipment\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.equipment}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"prof-and-lang\">\r\n              <h3>Proficiencies {'&'} Languages</h3>\r\n              <textarea\r\n                name=\"profAndLang\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.profAndLang}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            {/* Display Status: public or private */}\r\n            <div id=\"public-private\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"public\" // this is a state, not value\r\n                value=\"true\"\r\n                onChange={(e) => this.handleDisplayStatusChange(e)}\r\n              />\r\n              <label>Public</label>\r\n\r\n              <input\r\n                type=\"radio\"\r\n                name=\"public\" // this is a state, not value\r\n                value=\"false\"\r\n                onChange={(e) => this.handleDisplayStatusChange(e)}\r\n              />\r\n              <label>Private</label>\r\n            </div>\r\n            {/* END Display Status: public or private */}\r\n\r\n            {this.state.editing ? (\r\n              <input\r\n                id=\"create-btn\"\r\n                type=\"submit\"\r\n                value=\"Update Your Character\"\r\n              ></input>\r\n            ) : (\r\n              <input\r\n                id=\"create-btn\"\r\n                type=\"submit\"\r\n                value=\"Create Your Character\"\r\n              ></input>\r\n            )}\r\n\r\n            {/* <input type=\"reset\" value=\"Reset\"></input> Does not work with modifiers */}\r\n            <Link to=\"/\">\r\n              <input id=\"cancel-btn\" type=\"button\" value=\"Cancel\"></input>\r\n            </Link>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allClasses: state.allClasses,\r\n    allRaces: state.allRaces,\r\n    allSkills: state.allSkills,\r\n    newCharacter: state.newCharacter,\r\n    currentUser: state.currentLoggedInUserInfo,\r\n    currentUpdatedCharacter: state.currentUpdatedCharacter,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllClasses: () => dispatch(getAllClasses()),\r\n    getAllRaces: () => dispatch(getAllRaces()),\r\n    getAllSkills: () => dispatch(getAllSkills()),\r\n    createCharacter: (characterInfo, userToken) =>\r\n      dispatch(createCharacter(characterInfo, userToken)),\r\n    updateCharacter: (characterInfo, updatingCharacterId) =>\r\n      dispatch(updateCharacter(characterInfo, updatingCharacterId)),\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CharacterCreationForm)\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\Classes.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\DisplayEquipment.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\Language.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\IndividualRace.jsx",["305"],"import React, { Component } from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { getApiData } from '../../redux/reducers'\r\n\r\nimport '../../css/single-race.css'\r\nimport { Link } from 'react-router-dom'\r\nimport dragonborn from './dnd race images/dragonborn.png'\r\nimport dwarf from './dnd race images/dwarf.png'\r\nimport elf from './dnd race images/elf.png'\r\nimport gnome from './dnd race images/gnome.png'\r\nimport halfElf from './dnd race images/half-elf.png'\r\nimport halfling from './dnd race images/halfling.png'\r\nimport halfOrc from './dnd race images/half-orc.png'\r\nimport human from './dnd race images/human.png'\r\nimport tiefling from './dnd race images/tiefling.png'\r\n\r\nclass IndividualRace extends Component {\r\n  componentDidMount = () => {\r\n    const race = 'races/' + this.props.match.params.race\r\n    this.props.getApiData(race)\r\n  }\r\n\r\n  render() {\r\n    const { race } = this.props.match.params\r\n    let bkgImage\r\n    race === 'dragonborn'\r\n      ? (bkgImage = dragonborn)\r\n      : race === 'dwarf'\r\n      ? (bkgImage = dwarf)\r\n      : race === 'elf'\r\n      ? (bkgImage = elf)\r\n      : race === 'gnome'\r\n      ? (bkgImage = gnome)\r\n      : race === 'half-elf'\r\n      ? (bkgImage = halfElf)\r\n      : race === 'halfling'\r\n      ? (bkgImage = halfling)\r\n      : race === 'half-orc'\r\n      ? (bkgImage = halfOrc)\r\n      : race === 'human'\r\n      ? (bkgImage = human)\r\n      : race === 'tiefling'\r\n      ? (bkgImage = tiefling)\r\n      : (bkgImage = '')\r\n    return (\r\n      <div className=\"signle-race-root-container\">\r\n        <div className=\"single-race-title\">\r\n          <h1>Race: {this.props.race.name}</h1>\r\n        </div>\r\n        <div className=\"single-race-container\">\r\n          <div className=\"single-race-image\">\r\n            <img src={bkgImage} alt=\"single-race-image\" />\r\n          </div>\r\n\r\n          {/* <div className=\"clear-float\"></div> */}\r\n\r\n          <div className=\"single-race-info\">\r\n            <div className=\"race-info-title\">\r\n              <h3>Age</h3>\r\n            </div>\r\n            <div className=\"race-info\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.age}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Alignment</h3>\r\n            </div>\r\n            <div className=\"race-info\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.alignment}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Language Description</h3>\r\n            </div>\r\n            <div className=\"race-info\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.language_desc}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Languages</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.ability_bonuses !== undefined ? (\r\n                this.props.race.languages.map((element, index) => {\r\n                  return (\r\n                    <div key={index}>\r\n                      <Link to={`/languages/${element.index}`}>\r\n                        <p>{element.name}</p>\r\n                      </Link>\r\n                    </div>\r\n                  )\r\n                })\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Size</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.size}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Size Description</h3>\r\n            </div>\r\n            <div className=\"race-info\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.size_description}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Ability Bonuses</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.ability_bonuses !== undefined ? (\r\n                this.props.race.ability_bonuses.map((element, index) => {\r\n                  return (\r\n                    <div key={index}>\r\n                      <Link to={`/bonus/${element.ability_score.index}`}>\r\n                        <p>{element.ability_score.name}</p>\r\n                      </Link>\r\n                      <h4>Bonus</h4>\r\n                      <p>{element.bonus}</p>\r\n                    </div>\r\n                  )\r\n                })\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Speed</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.speed}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Starting Proficiencies</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.starting_proficiencies !== undefined ? (\r\n                this.props.race.starting_proficiencies.length !== 0 ? (\r\n                  this.props.race.starting_proficiencies.map(\r\n                    (element, index) => {\r\n                      return (\r\n                        <div key={index}>\r\n                          <p>{element.name}</p>\r\n                        </div>\r\n                      )\r\n                    }\r\n                  )\r\n                ) : (\r\n                  <div>\r\n                    <p>None</p>\r\n                  </div>\r\n                )\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Starting Proficiency Options</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.starting_proficiency_options !== undefined ? (\r\n                <div>\r\n                  Choose: {this.props.race.starting_proficiency_options.choose}\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <p>Choose: None</p>\r\n                </div>\r\n              )}\r\n\r\n              {this.props.race.starting_proficiency_options !== undefined ? (\r\n                this.props.race.starting_proficiency_options.from.length !==\r\n                0 ? (\r\n                  this.props.race.starting_proficiency_options.from.map(\r\n                    (element, index) => {\r\n                      return (\r\n                        <div key={index}>\r\n                          <Link to={`/races/proficiencies/${element.index}`}>\r\n                            <p>{element.name}</p>\r\n                          </Link>\r\n                        </div>\r\n                      )\r\n                    }\r\n                  )\r\n                ) : (\r\n                  <div>\r\n                    <p>None</p>\r\n                  </div>\r\n                )\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Sub Races</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.subraces !== undefined ? (\r\n                this.props.race.subraces.length !== 0 ? (\r\n                  this.props.race.subraces.map((element, index) => {\r\n                    return (\r\n                      <div key={index}>\r\n                        <p>{element.name}</p>\r\n                      </div>\r\n                    )\r\n                  })\r\n                ) : (\r\n                  <div>\r\n                    <p>None</p>\r\n                  </div>\r\n                )\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Traits</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.traits !== undefined ? (\r\n                this.props.race.traits.map((element, index) => {\r\n                  return (\r\n                    <div key={index}>\r\n                      <Link to={`/traits/${element.index}`}>\r\n                        <p>{element.name}</p>\r\n                      </Link>\r\n                    </div>\r\n                  )\r\n                })\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    race: state.dndData,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getApiData: (searchApi) => dispatch(getApiData(searchApi)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IndividualRace)\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\Trait.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\Proficiency.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\Races.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\monsters\\Monsters.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\monsters\\IndividualMonster.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\monsters\\ConditionImmunity.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\builds\\Builds.jsx",["306"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getAllCharacters } from '../../redux/reducers'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport '../../css/builds.css'\r\n\r\nclass Builds extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      await this.props.getAllCharacters()\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"builds-container\">\r\n        <div id=\"builds-container-h1\">\r\n          <h1>Characters</h1>\r\n        </div>\r\n        <div id=\"build-character-name\">\r\n          {this.props.characters !== undefined ? (\r\n            this.props.characters.map((item, index) => {\r\n              return (\r\n                <Link\r\n                  to={`/character/${item.id}`}\r\n                  style={{ textDecoration: 'none' }}\r\n                  key={index}\r\n                >\r\n                  <h3 id=\"public-characters\">{item.name}</h3>\r\n                </Link>\r\n              )\r\n            })\r\n          ) : (\r\n            <h1>Loading</h1>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    characters: state.characters.characters,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllCharacters: () => dispatch(getAllCharacters()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Builds)\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\profile\\Profile.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\builds\\DisplayCharacter.jsx",["307","308","309","310","311","312","313","314","315"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { deleteCharacter, getSingleCharacter } from '../../redux/reducers'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport dragonborn from '../races/dnd race images/dragonborn.png'\r\nimport dwarf from '../races/dnd race images/dwarf.png'\r\nimport elf from '../races/dnd race images/elf.png'\r\nimport gnome from '../races/dnd race images/gnome.png'\r\nimport halfElf from '../races/dnd race images/half-elf.png'\r\nimport halfling from '../races/dnd race images/halfling.png'\r\nimport halfOrc from '../races/dnd race images/half-orc.png'\r\nimport human from '../races/dnd race images/human.png'\r\nimport tiefling from '../races/dnd race images/tiefling.png'\r\n\r\nimport '../../css/characterdisplay.css'\r\n\r\nclass DisplayCharacter extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      redirect: false,\r\n      initiative: 0,\r\n      level: 1,\r\n      success: 0,\r\n      failure: 0,\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      await this.props.getSingleCharacter(this.props.match.params.id)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  handleDelete = () => {\r\n    this.props.deleteCharacter(this.props.character.id).then(() => {\r\n      this.setState({\r\n        redirect: true,\r\n      })\r\n    })\r\n  }\r\n  getInitiative = () => {\r\n    let modifier = Math.floor((parseInt(this.props.character.dex) - 10) / 2)\r\n    let d20 = Math.round(Math.random() * 20)\r\n    this.setState({\r\n      initiative: modifier + d20,\r\n    })\r\n  }\r\n  lvlUp = () => {\r\n    this.setState({\r\n      level: this.state.level + 1,\r\n    })\r\n  }\r\n  lvlDown = () => {\r\n    if (this.state.level === 1) {\r\n      alert(\"You can't be lower than lvl. 1\")\r\n    } else {\r\n      this.setState({\r\n        level: this.state.level - 1,\r\n      })\r\n    }\r\n  }\r\n  setSucess = () => {\r\n    if (this.state.success === 3) {\r\n      alert('Death Save Success caps at 3')\r\n    } else {\r\n      this.setState({\r\n        success: this.state.success + 1,\r\n      })\r\n    }\r\n  }\r\n  setFailure = () => {\r\n    if (this.state.failure === 3) {\r\n      alert('Death Save failure caps at 3')\r\n    } else {\r\n      this.setState({\r\n        failure: this.state.failure + 1,\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect to=\"/userprofile\" />\r\n    }\r\n    return (\r\n      <div id=\"character-container\">\r\n        <div id=\"character-info-container\">\r\n          {this.props.character !== undefined ? (\r\n            <div>\r\n              <div id=\"display-character-info\">\r\n                <div id=\"character-image-info\">\r\n                  <div id=\"character-race-image\">\r\n                    {this.props.character.race === 'dragonborn' && (\r\n                      <img\r\n                        src={dragonborn}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginleft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'dwarf' && (\r\n                      <img\r\n                        src={dwarf}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginleft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'elf' && (\r\n                      <img\r\n                        src={elf}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginleft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'gnome' && (\r\n                      <img\r\n                        src={gnome}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginleft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'half-elf' && (\r\n                      <img\r\n                        src={halfElf}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginleft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'halfling' && (\r\n                      <img\r\n                        src={halfling}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginleft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'half-orc' && (\r\n                      <img\r\n                        src={halfOrc}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginleft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'human' && (\r\n                      <img\r\n                        src={human}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginleft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'tiefling' && (\r\n                      <img\r\n                        src={tiefling}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginleft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {/* {\r\n                                        this.props.character.race !== (\"dragonborn\" || \"dwarf\" || \"elf\" || \"half-elf\" || \"gnome\" || \"halfling\" || \"half-orc\" || \"human\" || \"tiefling\") && <img src={ \"https://wow.zamimg.com/modelviewer/live/webthumbs/npc/15/94223.png\" } alt=\"race-image\" height=\"500px\" width=\"420px\" marginleft = \"30px\"></img>\r\n                                    } */}\r\n                  </div>\r\n                  <div className=\"character-info\">\r\n                    <div id=\"general-info\">\r\n                      <h3>Character Name : {this.props.character.name}</h3>\r\n                      <div id=\"character-level-counter\">\r\n                        <h3 id=\"current-level\">Level: {this.state.level}</h3>\r\n                        <button id=\"lvl-up\" onClick={() => this.lvlUp()}>\r\n                          Level Up\r\n                        </button>\r\n                        <button id=\"lvl-down\" onClick={() => this.lvlDown()}>\r\n                          Level Down\r\n                        </button>\r\n                      </div>\r\n                      <h3>\r\n                        Class :{' '}\r\n                        {this.props.character.class.charAt(0).toUpperCase()}\r\n                        {this.props.character.class.substr(1)}\r\n                      </h3>\r\n                      <h3>\r\n                        Race :{' '}\r\n                        {this.props.character.race.charAt(0).toUpperCase()}\r\n                        {this.props.character.race.substr(1)}\r\n                      </h3>\r\n                      <h3>\r\n                        Gender:{' '}\r\n                        {this.props.character.gender.charAt(0).toUpperCase()}\r\n                        {this.props.character.gender.substr(1)}\r\n                      </h3>\r\n                      <h3>Armor Class : {this.props.character.armorClass}</h3>\r\n                      <h3>Speed : {this.props.character.speed}</h3>\r\n\r\n                      <div id=\"character-skills-1-4\">\r\n                        {this.props.character.skill1 !== null ? (\r\n                          <h3>Skill #1 : {this.props.character.skill1}</h3>\r\n                        ) : (\r\n                          <h3>Skill #1 : No Skill Chosen</h3>\r\n                        )}\r\n                        {this.props.character.skill2 !== null ? (\r\n                          <h3>Skill #2 : {this.props.character.skill2}</h3>\r\n                        ) : (\r\n                          <h3>Skill #2 : No Skill Chosen</h3>\r\n                        )}\r\n                        {this.props.character.skill3 !== null ? (\r\n                          <h3>Skill #3 : {this.props.character.skill3}</h3>\r\n                        ) : (\r\n                          <h3>Skill #3 : No Skill Chosen</h3>\r\n                        )}\r\n                        {this.props.character.skill4 !== null ? (\r\n                          <h3>Skill #4 : {this.props.character.skill4}</h3>\r\n                        ) : (\r\n                          <h3>Skill #4 : No Skill Chosen</h3>\r\n                        )}\r\n                      </div>\r\n                      <br></br>\r\n                      <div id=\"initiative-check\">\r\n                        <h3 id=\"initative-tag\">\r\n                          Initiative: {this.state.initiative}\r\n                        </h3>{' '}\r\n                        <button\r\n                          id=\"getInitiative\"\r\n                          onClick={(e) => this.getInitiative()}\r\n                        >\r\n                          Get Initative\r\n                        </button>\r\n                      </div>\r\n                      <div id=\"death-saves\">\r\n                        <div id=\"death-saves-success\">\r\n                          {' '}\r\n                          <button onClick={(e) => this.setSucess()}>\r\n                            Death Saves{'(Successes)'}: {this.state.success}\r\n                          </button>\r\n                        </div>\r\n                        <div id=\"death-saves-failures\">\r\n                          <button onClick={(e) => this.setFailure()}>\r\n                            Death Saves{'(Failures)'}: {this.state.failure}\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <br></br>\r\n                </div>\r\n                <div id=\"attributes\">\r\n                  <h3>Strength : {this.props.character.str}</h3>\r\n                  <h3>Dexterity : {this.props.character.dex}</h3>\r\n                  <h3>Constitution : {this.props.character.con}</h3>\r\n                  <h3>Intelligence : {this.props.character.int}</h3>\r\n                  <h3>Wisdom : {this.props.character.wis}</h3>\r\n                  <h3>Charisma : {this.props.character.cha}</h3>\r\n                </div>\r\n                <div id=\"further-info\">\r\n                  <div id=\"further-info-personality-traits\">\r\n                    <h3 id=\"further-info-personality-traits-h3\">\r\n                      Personality Traits\r\n                    </h3>\r\n                    <p>{this.props.character.personalityTraits}</p>\r\n                  </div>\r\n                  <div id=\"further-info-flaws\">\r\n                    <h3 id=\"further-info-flaws-h3\">Flaws</h3>{' '}\r\n                    <p>{this.props.character.flaws}</p>\r\n                  </div>\r\n                  <div id=\"further-info-ideals\">\r\n                    <h3 id=\"further-info-ideals-h3\">Ideals</h3>{' '}\r\n                    <p>{this.props.character.ideals}</p>\r\n                  </div>\r\n                  <div id=\"further-info-bonds\">\r\n                    <h3 id=\"further-info-bonds-h3\">Bonds</h3>{' '}\r\n                    <p>{this.props.character.bonds}</p>\r\n                  </div>\r\n                </div>\r\n                <div id=\"further-info2\">\r\n                  <div id=\"further-info2-attacksAndSpellcasting\">\r\n                    <h3 id=\"further-info2-attacksAndSpellcasting-h3\">\r\n                      Attacks {'&'} Spellcasting\r\n                    </h3>\r\n                    <p>{this.props.character.attacksAndSpellcasting}</p>\r\n                  </div>\r\n                  <div id=\"further-info2-featuresAndTraits\">\r\n                    <h3 id=\"further-info2-featuresAndTraits-h3\">\r\n                      Features {'&'} Traits\r\n                    </h3>{' '}\r\n                    <p>{this.props.character.featuresAndTraits}</p>\r\n                  </div>\r\n                  <div id=\"further-info2-equipment\">\r\n                    <h3 id=\"further-info2-equipment-h3\">Equipment</h3>{' '}\r\n                    <p>{this.props.character.equipment}</p>\r\n                  </div>\r\n                  <div id=\"further-info2-profAndLang\">\r\n                    <h3 id=\"further-info2-profAndLang-h3\">\r\n                      Proficiencies {'&'} Languages\r\n                    </h3>{' '}\r\n                    <p>{this.props.character.profAndLang}</p>\r\n                  </div>\r\n                </div>\r\n                {/* this.props.currentUser.userId === this.props.character.userId ? <Link to = {`/editCharacter/${this.props.match.params.id}`}><button id = \"edit-character-btn\">Edit</button></Link> : <span/> */}\r\n              </div>\r\n\r\n              {/* Can only see these buttons if this character has a userId (i.e. it's private). */}\r\n              {this.props.character.userId ? (\r\n                <div>\r\n                  <Link\r\n                    to={{\r\n                      pathname: '/CharacterCreation',\r\n                      state: {\r\n                        editing: true,\r\n                        updatingCharacterId: this.props.character.id,\r\n                        oldCharacterInfo: this.props.character,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <button id=\"edit-character-btn\">Edit Character</button>\r\n                  </Link>\r\n                  <button\r\n                    id=\"delete-character-btn\"\r\n                    onClick={() => this.handleDelete()}\r\n                  >\r\n                    Delete Character\r\n                  </button>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <h1 id=\"loading\">Loading</h1>\r\n          )}\r\n          {/* {this.props.character !== undefined ?\r\n                    this.props.character.map( (item, index) => {\r\n                        return(\r\n                            <div id = {item.id}>\r\n                                <h3>{item.name}</h3>\r\n                            </div>\r\n                        )\r\n                    }) : <h1>Loading</h1>\r\n                } */}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    character: state.character.characters,\r\n    currentUser: state.currentLoggedInUserInfo,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getSingleCharacter: (id) => dispatch(getSingleCharacter(id)),\r\n    deleteCharacter: (deleteCharacterId) =>\r\n      dispatch(deleteCharacter(deleteCharacterId)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayCharacter)\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\editCharacters\\EditCharacter.jsx",["316"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { connect } from 'react-redux'\r\nimport {\r\n    getAllClasses,\r\n    getAllRaces,\r\n    getAllSkills,\r\n    getSingleCharacter\r\n} from '../../redux/reducers'\r\nimport '../../css/charactercreation.css'\r\nclass EditCharacter extends React.Component {\r\n    constructor ( props ) {\r\n        super( props )\r\n        this.state = {\r\n            characterInfo: {\r\n                characterName: '',\r\n                class: '',\r\n                race: '',\r\n                gender: '',\r\n                proficiencyBonus: '2',\r\n                armorClass: 10,\r\n                initiative: 0,\r\n                speed: 0,\r\n                skills: [],\r\n                str: 0,\r\n                dex: 0,\r\n                con: 0,\r\n                int: 0,\r\n                wis: 0,\r\n                cha: 0,\r\n                personalityTraits: '',\r\n                flaws: '',\r\n                ideals: '',\r\n                userId: '',\r\n            },\r\n            public: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await this.props.getAllClasses()\r\n        await this.props.getAllRaces()\r\n        await this.props.getAllSkills()\r\n        await this.props.getSingleCharacter( this.props.match.params.id )\r\n        this.setState( {\r\n            characterInfo: {\r\n                characterName: this.props.character.characterName,\r\n                class: this.props.character.class,\r\n                race: this.props.character.race,\r\n                gender: this.props.character.gender,\r\n                str: this.props.character.str,\r\n                dex: this.props.character.dex,\r\n                con: this.props.character.con,\r\n                int: this.props.character.int,\r\n                wis: this.props.character.wis,\r\n                cha: this.props.character.cha,\r\n                personalityTraits: this.props.character.personalityTraits,\r\n                flaws: this.props.character.flaws,\r\n                ideals: this.props.character.ideals,\r\n                userId: this.props.character.userId,\r\n            }\r\n        } )\r\n    }\r\n\r\n    handleClassSelectChange = ( e ) => {\r\n        this.setState( {\r\n            characterInfo: {\r\n                ...this.state.characterInfo,\r\n                class: e.target.value,\r\n            },\r\n        } )\r\n    }\r\n\r\n    handleRaceSelectChange = ( e ) => {\r\n        const { value } = e.target\r\n\r\n        if (\r\n            value === 'dragonborn' ||\r\n            value === 'elf' ||\r\n            value === 'half-elf' ||\r\n            value === 'half-orc' ||\r\n            value === 'human' ||\r\n            value === 'tiefling'\r\n        ) {\r\n            this.setState( {\r\n                characterInfo: {\r\n                    ...this.state.characterInfo,\r\n                    race: e.target.value,\r\n                    speed: 30,\r\n                },\r\n            } )\r\n        } else {\r\n            this.setState( {\r\n                characterInfo: {\r\n                    ...this.state.characterInfo,\r\n                    race: e.target.value,\r\n                    speed: 25,\r\n                },\r\n            } )\r\n        }\r\n    }\r\n\r\n    handleGenderSelectChange = ( e ) => {\r\n        this.setState( {\r\n            characterInfo: {\r\n                ...this.state.characterInfo,\r\n                gender: e.target.value,\r\n            },\r\n        } )\r\n    }\r\n\r\n    handleSkillsSelectChange = ( e ) => {\r\n        if ( this.state.characterInfo.skills.length === 4 ) {\r\n            alert( 'You may only have 4 skills per character!' )\r\n            return\r\n        }\r\n        for ( const skill of this.state.characterInfo.skills ) {\r\n            if ( skill === e.target.value ) {\r\n                alert( 'No duplicate skills allowed!' )\r\n                return\r\n            }\r\n        }\r\n\r\n        this.setState( {\r\n            characterInfo: {\r\n                ...this.state.characterInfo,\r\n                skills: [ ...this.state.characterInfo.skills, e.target.value ], // append skill to array\r\n            },\r\n        } )\r\n    }\r\n\r\n    handleAbilityScoreChange = ( e ) => {\r\n        let modifier = Math.floor( ( parseInt( e.target.value ) - 10 ) / 2 )\r\n        document.getElementById( `${e.target.name}` + '-modifier' ).innerHTML =\r\n            '+' + modifier\r\n\r\n        if ( e.target.name === 'dex' ) {\r\n            this.setState( {\r\n                characterInfo: {\r\n                    ...this.state.characterInfo,\r\n                    [ e.target.name ]: e.target.value,\r\n                    armorClass: 10 + modifier,\r\n                },\r\n            } )\r\n        } else {\r\n            this.setState( {\r\n                characterInfo: {\r\n                    ...this.state.characterInfo,\r\n                    [ e.target.name ]: e.target.value,\r\n                },\r\n            } )\r\n        }\r\n    }\r\n\r\n    handleMainStatChange = ( e ) => {\r\n        this.setState( {\r\n            characterInfo: {\r\n                ...this.state.characterInfo,\r\n                [ e.target.name ]: e.target.value,\r\n            },\r\n        } )\r\n    }\r\n\r\n    handleDisplayStatusChange = ( e ) => {\r\n        this.setState( {\r\n            public: e.target.value,\r\n        } )\r\n    }\r\n\r\n    handleTextareaChange = ( e ) => {\r\n        this.setState( {\r\n            characterInfo: {\r\n                ...this.state.characterInfo,\r\n                [ e.target.name ]: e.target.value,\r\n            },\r\n        } )\r\n    }\r\n\r\n    handleFormSubmit = ( e ) => {\r\n        e.preventDefault()\r\n        if ( this.state.public === 'false' ) {\r\n            this.setState( {\r\n                characterInfo: {\r\n                    ...this.state.characterInfo,\r\n                    userId: this.props.currentUser.userId,\r\n                },\r\n            } )\r\n        } else {\r\n            delete this.state.characterInfo.userId\r\n        }\r\n\r\n         setTimeout(() => {\r\n            this.props.updateCharacter(\r\n                this.state.characterInfo,\r\n                this.props.match.params.id\r\n              )\r\n        }, 1200) \r\n        setTimeout( () => {\r\n            if ( this.props.newCharacter !== undefined ) {\r\n                if ( this.state.public === 'true' ) {\r\n                    this.props.history.push( '/builds' )\r\n                } else {\r\n                    this.props.history.push( '/userprofile' )\r\n                }\r\n            }\r\n        }, 2000 )\r\n        /* } */\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"creation-form\">\r\n                <header>DUNGEONS { '&' } DRAGONS CHARACTER EDIT FORM</header>\r\n\r\n                <div id=\"character-creation-form\">\r\n                    {/* Main Character Creation Form */ }\r\n                    <form onSubmit={ ( e ) => this.handleFormSubmit( e ) }>\r\n                        {/* Character Name */ }\r\n                        <div id=\"character-creation-name\">\r\n                            <label>\r\n                                Character Name:<br></br>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"characterName\"\r\n                                    defaultValue={ this.state.characterInfo.characterName }\r\n                                    onChange={ ( e ) =>\r\n                                        this.setState( {\r\n                                            characterInfo: {\r\n                                                ...this.state.characterInfo,\r\n                                                characterName: e.target.value,\r\n                                            },\r\n                                        } )\r\n                                    }\r\n                                    required\r\n                                ></input>\r\n                            </label>\r\n                        </div>\r\n                        <br></br>\r\n                        {/* End Character Name */ }\r\n\r\n                        {/* Class Select */ }\r\n                        <div id=\"class-select\">\r\n                            <label>\r\n                                Select Your Classes<br></br>\r\n                                <select\r\n                                    name=\"classSelect\"\r\n                                    onChange={ ( e ) => this.handleClassSelectChange( e ) }\r\n                                    required\r\n                                >\r\n                                    <option value=\"\">--Choose Your Class--</option>\r\n                                    { this.props.allClasses !== undefined ? (\r\n                                        this.props.allClasses.map( ( element, index ) => {\r\n                                            return (\r\n                                                <option key={ index } value={ element.index }>\r\n                                                    {element.name }\r\n                                                </option>\r\n                                            )\r\n                                        } )\r\n                                    ) : (\r\n                                            <span />\r\n                                        ) }\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n                        {/* End Class Select */ }\r\n\r\n                        <br></br>\r\n                        {/* Race Select */ }\r\n                        <div id=\"race-select\">\r\n                            <label>\r\n                                Select Your Race\r\n                <br></br>\r\n                                <select\r\n                                    name=\"raceSelect\"\r\n                                    onChange={ ( e ) => this.handleRaceSelectChange( e ) }\r\n                                    required\r\n                                >\r\n                                    <option value=\"\">--Choose Your Race--</option>\r\n                                    { this.props.allRaces !== undefined ? (\r\n                                        this.props.allRaces.map( ( element, index ) => {\r\n                                            return (\r\n                                                <option key={ index } value={ element.index }>\r\n                                                    {element.name }\r\n                                                </option>\r\n                                            )\r\n                                        } )\r\n                                    ) : (\r\n                                            <span />\r\n                                        ) }\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n                        {/* End Race Select */ }\r\n\r\n                        <br></br>\r\n                        {/* Gender Select */ }\r\n                        <div id=\"gender-choices\">\r\n                            <div className=\"gender-male\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id=\"male\"\r\n                                    name=\"gender\"\r\n                                    value=\"male\"\r\n                                    onChange={ ( e ) => this.handleGenderSelectChange( e ) }\r\n                                ></input>\r\n                                <label htmlFor=\"male\">Male</label>\r\n                            </div>\r\n                            <div className=\"gender-female\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id=\"female\"\r\n                                    name=\"gender\"\r\n                                    value=\"female\"\r\n                                    onChange={ ( e ) => this.handleGenderSelectChange( e ) }\r\n                                ></input>\r\n                                <label htmlFor=\"female\">Female</label>\r\n                            </div>\r\n                            <div className=\"gender-other\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id=\"other\"\r\n                                    name=\"gender\"\r\n                                    value=\"other\"\r\n                                    onChange={ ( e ) => this.handleGenderSelectChange( e ) }\r\n                                ></input>\r\n                                <label htmlFor=\"other\">Other</label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* End Gender Select  */ }\r\n\r\n                        {/* Main Stats */ }\r\n                        <div id=\"character-prof-bonus\">\r\n                            <label>\r\n                                Proficiency Bonus (+2 For Lvl.1) :\r\n                <span\r\n                                    id=\"proficiencyBonus-display\"\r\n                                    // type=\"number\"\r\n                                    name=\"proficiencyBonus\"\r\n                                    // placeholder={Math.floor(Math.random() * 6)}\r\n                                    // defaultValue={Math.floor(Math.random() * 6)}\r\n                                    value=\"2\"\r\n                                    onChange={ ( e ) =>\r\n                                        alert( 'A lvl.1 character has +2 proficieny bonus!' )\r\n                                    }\r\n                                    required\r\n                                >\r\n                                    { ' ' }\r\n                                    { this.state.characterInfo.proficiencyBonus }\r\n                                </span>\r\n                            </label>\r\n                        </div>\r\n                        <div id=\"other-main-stats\">\r\n                            <label>\r\n                                Armor Class :\r\n                <span\r\n                                    id=\"armorClass-display\"\r\n                                    type=\"number\"\r\n                                    name=\"armorClass\"\r\n                                    required\r\n                                >\r\n                                    { ' ' }\r\n                                    { this.state.characterInfo.armorClass }\r\n                                </span>\r\n                            </label>\r\n\r\n                            {/* <br></br>\r\n          <label>\r\n            Initiative\r\n            <br></br>\r\n            <input\r\n              type=\"number\"\r\n              name=\"Initiative\"\r\n              placeholder={ Math.floor( Math.random() * 15 ) }\r\n              // defaultValue={Math.floor(Math.random() * 15)}\r\n              onChange={ ( e ) => this.handleMainStatChange( e ) }\r\n              required\r\n            ></input>\r\n          </label> */}\r\n\r\n                            <br></br>\r\n                            <label>\r\n                                Speed :\r\n                <span\r\n                                    id=\"speed-display\"\r\n                                    type=\"number\"\r\n                                    name=\"speed\"\r\n                                    value={ this.state.characterInfo.speed }\r\n                                    required\r\n                                >\r\n                                    { ' ' }\r\n                                    { this.state.characterInfo.speed }\r\n                                </span>\r\n                            </label>\r\n                            <br></br>\r\n                        </div>\r\n                        {/* End Main Stats */ }\r\n\r\n                        {/* Skill Select */ }\r\n                        <div id=\"select-character-skill\">\r\n                            <label>\r\n                                Reselect Your Skills (Choose up to 4)\r\n                <br></br>\r\n                                <select\r\n                                    name=\"skillsSelect\"\r\n                                    onChange={ ( e ) => this.handleSkillsSelectChange( e ) }\r\n                                    required\r\n                                >\r\n                                    <option value=\"\">--Choose Your Skills--</option>\r\n                                    { this.props.allSkills !== undefined ? (\r\n                                        this.props.allSkills.map( ( element, index ) => {\r\n                                            return (\r\n                                                <option key={ index } value={ element.index }>\r\n                                                    {element.name }\r\n                                                </option>\r\n                                            )\r\n                                        } )\r\n                                    ) : (\r\n                                            <span />\r\n                                        ) }\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n                        {/* End Skill Select */ }\r\n\r\n                        <br></br>\r\n                        {/* Ability Scores */ }\r\n                        <div id=\"character-attributes\">\r\n                            <div id=\"str\">\r\n                                <label>\r\n                                    Strength\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"str\"\r\n                                        defaultValue={ this.state.characterInfo.str }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"str-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div id=\"dex\">\r\n                                <label>\r\n                                    Dexterity\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"dex\"\r\n                                        defaultValue={ this.state.characterInfo.dex }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"dex-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div id=\"con\">\r\n                                <label>\r\n                                    Constitution\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"con\"\r\n                                        defaultValue={ this.state.characterInfo.con }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"con-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div id=\"int\">\r\n                                <label>\r\n                                    Intelligence\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"int\"\r\n                                        defaultValue={ this.state.characterInfo.int }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"int-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div id=\"wis\">\r\n                                <label>\r\n                                    Wisdom\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"wis\"\r\n                                        defaultValue={ this.state.characterInfo.wis }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"wis-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div id=\"cha\">\r\n                                <label>\r\n                                    Charisma\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"cha\"\r\n                                        defaultValue={ this.state.characterInfo.cha }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"cha-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div id=\"personality-traits\">\r\n                            <h3>Personality Traits</h3>\r\n                            <textarea\r\n                                name=\"personalityTraits\"\r\n                                cols=\"40\"\r\n                                rows=\"6\"\r\n                                defaultValue={ this.state.characterInfo.personalityTraits }\r\n                                onChange={ ( e ) => this.handleTextareaChange( e ) }\r\n                            ></textarea>\r\n                        </div>\r\n\r\n                        <div id=\"flaws\">\r\n                            <h3>Flaws</h3>\r\n                            <textarea\r\n                                name=\"flaws\"\r\n                                cols=\"40\"\r\n                                rows=\"6\"\r\n                                defaultValue={ this.state.characterInfo.flaws }\r\n                                onChange={ ( e ) => this.handleTextareaChange( e ) }\r\n                            ></textarea>\r\n                        </div>\r\n\r\n                        <div id=\"ideals\">\r\n                            <h3>Ideals</h3>\r\n                            <textarea\r\n                                name=\"ideals\"\r\n                                cols=\"40\"\r\n                                rows=\"6\"\r\n                                defaultValue={ this.state.characterInfo.ideals }\r\n                                onChange={ ( e ) => this.handleTextareaChange( e ) }\r\n                            ></textarea>\r\n                        </div>\r\n\r\n                        {/* Display Status: public or private */ }\r\n                        <div id=\"public-private\">\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"public\" // this is a state, not value\r\n                                value=\"true\"\r\n                                onChange={ ( e ) => this.handleDisplayStatusChange( e ) }\r\n                            />\r\n                            <label>Public</label>\r\n\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"public\" // this is a state, not value\r\n                                value=\"false\"\r\n                                onChange={ ( e ) => this.handleDisplayStatusChange( e ) }\r\n                            />\r\n                            <label>Private</label>\r\n                        </div>\r\n                        {/* END Display Status: public or private */ }\r\n\r\n                        <input\r\n                            id=\"create-btn\"\r\n                            type=\"submit\"\r\n                            value=\"Save Changes\"\r\n                        ></input>\r\n                        {/* <input type=\"reset\" value=\"Reset\"></input> Does not work with modifiers */ }\r\n                        <Link to=\"/\">\r\n                            <input id=\"cancel-btn\" type=\"button\" value=\"Cancel\"></input>\r\n                        </Link>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ( state ) => {\r\n    return {\r\n        allClasses: state.allClasses,\r\n        allRaces: state.allRaces,\r\n        allSkills: state.allSkills,\r\n        newCharacter: state.newCharacter,\r\n        character: state.character.characters,\r\n        currentUser: state.currentLoggedInUserInfo,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n    return {\r\n        getAllClasses: () => dispatch( getAllClasses() ),\r\n        getAllRaces: () => dispatch( getAllRaces() ),\r\n        getAllSkills: () => dispatch( getAllSkills() ),\r\n        /*  createCharacter: (characterInfo, userToken) =>\r\n         dispatch(createCharacter(characterInfo, userToken)), */\r\n        getSingleCharacter: ( id ) => dispatch( getSingleCharacter( id ) ),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)( EditCharacter )\r\n",["317","318"],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\ClassLevels.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\Skills.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\ClassSpells.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\redux\\reducers\\actionTypes.js",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\subclasses\\SubClasses.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\subclasses\\IndividualSubClass.jsx",["319"],"\r\nimport React, { Component } from \"react\";\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getApiData } from \"../../../redux/reducers/index\"\r\n\r\nimport SubClassSpells from \"./SubClassSpells\";\r\nimport \"../../../css/individualsubclass.css\"\r\n\r\nclass IndividualSubClass extends Component {\r\n    constructor ( props ) {\r\n        super( props );\r\n    }\r\n\r\n    async componentDidMount () {\r\n        try {\r\n\r\n            let url = `subclasses/${this.props.match.params.index}`;\r\n            await this.props.getApiData( url );\r\n        } catch ( error ) {\r\n            console.log( error );\r\n        }\r\n\r\n    }\r\n\r\n    render () {\r\n \r\n        if ( !this.props.class.class ) {\r\n            return <h1 id = \"loading\">Loading</h1>\r\n        }\r\n        return (\r\n            <div id = \"indiv-subclass-container\">\r\n                {/* <Link to={ `/class/${this.props.class.class.index}` } style={ { textDecoration: 'none' } }><h3 id = \"back\">Back to { this.props.class.class.name } Information</h3></Link> */}\r\n                <div id = \"indiviudal-subclass-container\">\r\n                <h1 id=\"subclasses-name\">{ this.props.class.name }</h1>\r\n                <h2 id=\"subclass-class-name\">Class: { this.props.class.class.name }</h2>\r\n                <h2 id=\"subclass-falvor\">Sub Class Flavor: { this.props.class.subclass_flavor }</h2>\r\n                <div className=\"subclass-desc\">\r\n                    <h2>--Sub Class Desciption--</h2>\r\n                    <div id = \"subclass-description\">\r\n                        { this.props.class.desc.map( ( item, index ) => {\r\n                            return (\r\n                                <p key = {index}>{ item }</p>\r\n                            )\r\n                        } ) }\r\n                    </div>\r\n\r\n                </div>\r\n                <div className = \"subclass-spells\">\r\n                    <h2>--Spells--</h2>\r\n                    { this.props.class.spells ?\r\n                        <div id = \"subclass-spells\">\r\n                            { this.props.class.spells.map( ( item, index ) => {\r\n                                return (\r\n                                    <SubClassSpells key={ index } prerequisites={ item.prerequisites } spell={ item.spell } />\r\n                                )\r\n                            } ) }\r\n                        </div>\r\n                        :\r\n                        <div id = \"subclass-spells\">\r\n                            <h3>There are no spells for this subclass</h3>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = ( state ) => {\r\n    \r\n    return {\r\n        class: state.dndData,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n    \r\n    return {\r\n        getApiData: ( url ) => dispatch( getApiData( url ) ),\r\n    }\r\n}\r\nexport default connect( mapStateToProps, mapDispatchToProps )( IndividualSubClass );","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\features\\IndividualFeature.jsx",["320"],"\r\nimport React, { Component } from \"react\";\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getApiData } from \"../../../redux/reducers/index\"\r\nimport FeatureChoice from \"./FeatureChoice\";\r\nimport \"../../../css/individualfeature.css\"\r\n\r\nclass IndividualFeature extends Component {\r\n    constructor ( props ) {\r\n        super( props );\r\n    }\r\n\r\n    async componentDidMount () {\r\n        try {\r\n            let url = `features/${this.props.match.params.index}`;\r\n            await this.props.getApiData( url );\r\n        } catch ( error ) {\r\n            console.log( error );\r\n        }\r\n\r\n    }\r\n\r\n    render () {\r\n        \r\n        if ( !this.props.feature.class ) {\r\n            return <h1 id =  \"loading\">Loading</h1>\r\n        }\r\n        return (\r\n            <div id = \"indiv-feature-container\">\r\n                {/* <Link to={ `/class/${this.props.feature.class.name.toLowerCase()}` } style={ { textDecoration: 'none' } }><h3 id=\"back\">Back to { this.props.feature.class.name.toLowerCase() } Information</h3></Link> */}\r\n                <div id=\"individual-feature\">\r\n                    <h1 id=\"feature-name\">{ this.props.feature.name }</h1>\r\n                    <h2 id=\"feature-class\">Class: { this.props.feature.class.name }</h2>\r\n                    { this.props.feature.level !== undefined && <h2 id=\"feature-level\">Level: { this.props.feature.level }</h2> }\r\n                    <div id=\"prerequisite-container\">\r\n                        <h2>--Prerequisites--</h2>\r\n                        { this.props.feature.prerequisites !== undefined ?\r\n                            <div id=\"prerequisites\">\r\n                                {\r\n                                    this.props.feature.prerequisites.map( (item, index) => {\r\n                                        return (\r\n                                            <h3 key = {index}>{ item.type }</h3>\r\n                                        )\r\n                                    } )\r\n                                }\r\n                            </div>\r\n                            :\r\n                            <div id=\"prerequisites\">\r\n                                <h3>This Feature Has No Prerequisites</h3>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"feature-desc\">\r\n                        <h2>--Description--</h2>\r\n                        <div id=\"description\">\r\n                            { this.props.feature.desc !== undefined &&\r\n                                this.props.feature.desc.map( ( item, index ) => {\r\n                                    return (\r\n                                        <p key={ index }>{ item }</p>\r\n                                    )\r\n                                } )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"feature-choices\">\r\n                        <h2>--Choices--</h2>\r\n                        { this.props.feature.choice !== undefined ?\r\n                            <div id=\"feature-choice\">\r\n                                <h3>Choose { this.props.feature.choice.choose } from:</h3>\r\n                                <FeatureChoice from={ this.props.feature.choice.from } />\r\n                            </div>\r\n                            :\r\n                            <div id=\"feature-choice\" >\r\n                                <h3>This Feature Has No Choices</h3>\r\n                            </div>\r\n                        }\r\n                    </div >\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = ( state ) => {\r\n    \r\n    return {\r\n        feature: state.dndData,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n    return {\r\n        getApiData: ( url ) => dispatch( getApiData( url ) ),\r\n    }\r\n}\r\nexport default connect( mapStateToProps, mapDispatchToProps )( IndividualFeature );","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\features\\Features.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\IndividualEquipment.jsx",["321"],"\r\nimport React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getApiData } from \"../../../redux/reducers/index\"\r\n\r\nimport \"../../../css/individualequipment.css\"\r\n\r\nclass IndividualEquipment extends Component {\r\n    constructor ( props ) {\r\n        super( props );\r\n    }\r\n\r\n    async componentDidMount () {\r\n        try {\r\n            let url = `starting-equipment/${this.props.match.params.index}`;\r\n            await this.props.getApiData( url );\r\n        } catch ( error ) {\r\n            console.log( error );\r\n        }\r\n\r\n    }\r\n\r\n    render () {\r\n        if ( !this.props.equipment.class ) {\r\n            return <h1 id = \"loading\">Loading</h1>\r\n        }\r\n        return (\r\n            <div id = \"idiv-equip-contain\">\r\n                {/* <Link to={ `/class/${this.props.match.params.index}` } style={ { textDecoration: 'none' } }><h3 id = \"back\">Back to { this.props.equipment.class.name } Information</h3></Link> */}\r\n                <div id = \"individual-equipment-container\">\r\n                    <h1 id = \"equipmentclass\">Class : { this.props.equipment.class.name }</h1>\r\n                    <div className=\"starting-equip\">\r\n                        <h2>--Sarting Equipment--</h2>\r\n                        { this.props.equipment.starting_equipment !== undefined ?\r\n                            this.props.equipment.starting_equipment.map( ( item, index ) => {\r\n                                return (\r\n                                    <div>\r\n                                        <h3 key = {index}>Quantity: { item.quantity }</h3>\r\n                                        <Link to={ `/equipment/${item.equipment.index}` } style={ { textDecoration: 'none' } }><h3 key = {index} id = \"start-equip-name\">{ item.equipment.name }</h3></Link>\r\n                                    </div>\r\n                                )\r\n                            } ) :\r\n                            <div>\r\n                                <h3>This Class Has No Starting Equipment</h3>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"equip-options\">\r\n                    <h2>Starting Equipment Options</h2>\r\n                    {\r\n                        this.props.equipment.starting_equipment_options.length > 0 ?\r\n                            <div>\r\n                                <h3>Choose 1 From: </h3>\r\n                                { this.props.equipment.starting_equipment_options.map( ( item, index ) => {\r\n                                        return(\r\n                                            <Options arr = {item.from}/>\r\n                                        )\r\n                                } ) }\r\n                            </div>:\r\n                            <div>\r\n                                <h3>This Class Has No Starting Equipment Options</h3>\r\n                                </div>\r\n                    }\r\n                </div> */}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = ( state ) => {\r\n    \r\n    return {\r\n        equipment: state.dndData,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n   \r\n    return {\r\n        getApiData: ( url ) => dispatch( getApiData( url ) ),\r\n    }\r\n}\r\nexport default connect( mapStateToProps, mapDispatchToProps )( IndividualEquipment );","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\StartingEquipments.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\AllEquipment.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\Bonus.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\DisplayProficiencies.jsx",["322"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { getApiData } from '../../../../../redux/reducers'\r\nimport '../../../../../css/displayproficiencies.css'\r\nclass DisplayProficiencies extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  async componentDidMount() {\r\n    \r\n    let url = `/proficiencies/${this.props.match.params.index}`\r\n    await this.props.getApiData(url)\r\n    //const {data} = await axios.get(`https://www.dnd5eapi.co/api/equipment/${this.props.prof.references.index}`)\r\n  }\r\n  render() {\r\n    \r\n    /* if (!this.props.prof.name) {\r\n      return <h1 id=\"disp-h1\">Loading</h1>\r\n    } */\r\n    return (\r\n      <div id = \"prof-container-container\">\r\n        <div id=\"prof-container\">\r\n        <h1 id=\"disp-h1\">{this.props.prof.name}</h1>\r\n        <div className=\"prof-classes\">\r\n          <h2 className=\"prof-classes\">--Classes--</h2>\r\n          <div>\r\n            {this.props.prof.classes ? (\r\n              <div id=\"pof-classes\">\r\n                {this.props.prof.classes.map((item, index) => {\r\n                  return (\r\n                    <Link\r\n                      to={`/class/${item.index}`}\r\n                      style={{ textDecoration: 'none' }}\r\n                    >\r\n                      <p key = {index} id = \"prof-class-name\">{item.name}</p>\r\n                    </Link>\r\n                  )\r\n                })}\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <h3 className=\"prof-classes\">\r\n                  This Skill Is Not Tied To Any Class\r\n                </h3>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"prof-races\">\r\n          <h2 className=\"prof-races\">--Races--</h2>\r\n          {this.props.prof.races !== undefined ? (\r\n            <div id=\"pof-races\">\r\n              {this.props.prof.races.map((item, index) => {\r\n                return (\r\n                  <Link\r\n                    to={`/race/${item.index}`}\r\n                    style={{ textDecoration: 'none' }}\r\n                  >\r\n                    <p key = {index} id = \"prof-race-name\">{item.name}</p>\r\n                  </Link>\r\n                )\r\n              })}\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <h3 className=\"fix-h1-h2-h3-h4\">\r\n                This Skill Is Not Tied To Any Race\r\n              </h3>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {/* {this.props.prof.references !== undefined && (\r\n          <div id=\"references\">\r\n            <h2 className=\"fix-h1-h2-h3-h4\">--References--</h2>\r\n            {this.props.prof.references.map((item, index) => {\r\n              return (\r\n                  <p id = \"prof-reference-p\" key={index}>{item.name}</p>\r\n              )\r\n            })}\r\n          </div>\r\n        )} */}\r\n      </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  \r\n  return {\r\n    prof: state.dndData,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  \r\n  return {\r\n    getApiData: (url) => dispatch(getApiData(url)),\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DisplayProficiencies)\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\IndividualClass.jsx",["323"],"\r\nimport React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { getApiData } from '../../../../../redux/reducers/index'\r\nimport Choices from './Choices'\r\nimport Proficiencies from './Proficiencies'\r\nimport SavingThrows from './SavingThrows'\r\nimport SpellCasting from './SpellCasting'\r\nimport Subclass from './Subclass'\r\n\r\nimport '../../../../../css/individualclass.css'\r\nclass IndividualClass extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    /* this.state = {\r\n            name: '',\r\n            hit_die: '',\r\n            p_choices: [],\r\n            proficiencies: [],\r\n            saving_throws: [],\r\n            starting_equipment: '',\r\n            class_levels: '',\r\n            subclasses: [],\r\n            spellCasting: {}\r\n        } */\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      let url = `classes/${this.props.match.params.index}`\r\n      await this.props.getApiData(url)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    /* if (!this.props.class.subclasses) {\r\n      return <h1>Loading</h1>\r\n    } */\r\n    return (\r\n      <div id=\"class-info\">\r\n       {/*  <Link to={`/classes`} style={{ textDecoration: 'none' }}>\r\n          <h3 id=\"back\">Back to Classes Information</h3>\r\n        </Link> */}\r\n        <div id = \"individual-class-basic-info\">\r\n        <h1 className=\"fix-h1-h2-h3-h4\" id=\"class-name\">\r\n          {this.props.class.name}\r\n        </h1>\r\n        <h2 className=\"fix-h1-h2-h3-h4\" id=\"hit-die\">\r\n          Hit Die: {this.props.class.hit_die}\r\n        </h2>\r\n        <div id=\"class-etc\">\r\n          {' '}\r\n          <Link\r\n            to={`/starting-equipment/${this.props.match.params.index}`}\r\n            style={{ textDecoration: 'none' }}\r\n          >\r\n            <h2 className=\"fix-h1-h2-h3-h4\">\r\n              {'--> '}Starting Equipment{' <--'}\r\n            </h2>\r\n          </Link>\r\n          <Link\r\n            to={`/class/${this.props.match.params.index}/levels`}\r\n            style={{ textDecoration: 'none' }}\r\n          >\r\n            <h2 className=\"fix-h1-h2-h3-h4\">\r\n              {'--> '}Class Levels{' <--'}\r\n            </h2>\r\n          </Link>\r\n          {this.props.class.spells && (\r\n            <Link\r\n              to={`/classSpells/${this.props.match.params.index}/spells`}\r\n              style={{ textDecoration: 'none' }}\r\n            >\r\n              <h2 className=\"fix-h1-h2-h3-h4\">\r\n                {'--> '}{this.props.class.name}\r\n                 Class Spells{' <--'}\r\n              </h2>\r\n            </Link>\r\n          )}\r\n        </div>\r\n        </div>\r\n        <div className=\"p_choices\">\r\n          <h2 className=\"fix-h1-h2-h3-h4\">--Proficiency Choices--</h2>\r\n          <div className=\"all-p-choices\">\r\n            {this.props.class.proficiency_choices !== undefined &&\r\n              this.props.class.proficiency_choices.map((item, index) => {\r\n                return (\r\n                  <Choices key={index} choose={item.choose} from={item.from} />\r\n                )\r\n              })}\r\n          </div>\r\n        </div>\r\n        <div className=\"proficiencies\">\r\n          <h2 className=\"fix-h1-h2-h3-h4\" id=\"proficiency\">\r\n            --Proficiencies--\r\n          </h2>\r\n          {this.props.class.proficiencies !== undefined &&\r\n            this.props.class.proficiencies.map((item, index) => {\r\n              return (\r\n                <Proficiencies\r\n                  key={index}\r\n                  name={item.name}\r\n                  classIndex={item.index}\r\n                />\r\n              )\r\n            })}\r\n        </div>\r\n        <div className=\"saving-throws\">\r\n          <h2 className=\"fix-h1-h2-h3-h4\">--Saving Throws-- </h2>\r\n          <div id=\"saving-throws-container\">\r\n            {this.props.class.saving_throws !== undefined &&\r\n              this.props.class.saving_throws.map((item, index) => {\r\n                return (\r\n                  <SavingThrows\r\n                    key={index}\r\n                    name={item.name}\r\n                    classIndex={item.index}\r\n                  />\r\n                )\r\n              })}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"subclasses\">\r\n          <h2 className=\"fix-h1-h2-h3-h4\">--Sub-Classes--</h2>\r\n          {this.props.class.subclasses !== undefined &&\r\n            this.props.class.subclasses.map((item, index) => {\r\n              return (\r\n                <Subclass\r\n                  key={index}\r\n                  name={item.name}\r\n                  classIndex={item.index}\r\n                />\r\n              )\r\n            })}\r\n        </div>\r\n        {this.props.class.spellcasting !== undefined &&\r\n          (this.props.class.spellcasting ? (\r\n            <div className=\"spellcasting\">\r\n              <h2 className=\"fix-h1-h2-h3-h4\">--Spell Casting ability--</h2>\r\n              <SpellCasting\r\n                info={this.props.class.spellcasting.info}\r\n                level={this.props.class.spellcasting.level}\r\n                spellcasting_ability={\r\n                  this.props.class.spellcasting.spellcasting_ability\r\n                }\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className=\"no-spell-casting\">\r\n              {' '}\r\n              <h2 className=\"fix-h1-h2-h3-h4\">\r\n                No Spell Casting for this class\r\n              </h2>\r\n            </div>\r\n          ))}\r\n        {/* <Link to={ `/starting-equipment/${this.props.match.params.index}` } style={ { textDecoration: 'none' } }><h2>Starting Equipment</h2></Link>\r\n                <Link to={ `/class/${this.props.match.params.index}/levels` } style={ { textDecoration: 'none' } }><h2>Class Levels</h2></Link>\r\n                {this.props.class.spells && <Link to={ `/classSpells/${this.props.match.params.index}/spells` } style={ { textDecoration: 'none' } }><h2>{ this.props.class.name } Class Spells</h2></Link> } */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  \r\n  return {\r\n    class: state.dndData,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n  return {\r\n    getApiData: (url) => dispatch(getApiData(url)),\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IndividualClass)\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\spells\\SpellDisplay.js",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\subclasses\\SubClass.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\features\\Feature.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\StartingEquipment.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\monsters\\DisplayMonster.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\races\\DisplayRace.jsx",["324"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport '../../css/races.css'\r\nimport dragonborn from './dnd race images/dragonborn.png'\r\nimport dwarf from './dnd race images/dwarf.png'\r\nimport elf from './dnd race images/elf.png'\r\nimport gnome from './dnd race images/gnome.png'\r\nimport halfElf from './dnd race images/half-elf.png'\r\nimport halfling from './dnd race images/halfling.png'\r\nimport halfOrc from './dnd race images/half-orc.png'\r\nimport human from './dnd race images/human.png'\r\nimport tiefling from './dnd race images/tiefling.png'\r\n\r\nclass DisplayRace extends Component {\r\n  render() {\r\n    const { index, name } = this.props\r\n    let bkgImage\r\n    index === 'dragonborn'\r\n      ? (bkgImage = dragonborn)\r\n      : index === 'dwarf'\r\n      ? (bkgImage = dwarf)\r\n      : index === 'elf'\r\n      ? (bkgImage = elf)\r\n      : index === 'gnome'\r\n      ? (bkgImage = gnome)\r\n      : index === 'half-elf'\r\n      ? (bkgImage = halfElf)\r\n      : index === 'halfling'\r\n      ? (bkgImage = halfling)\r\n      : index === 'half-orc'\r\n      ? (bkgImage = halfOrc)\r\n      : index === 'human'\r\n      ? (bkgImage = human)\r\n      : index === 'tiefling'\r\n      ? (bkgImage = tiefling)\r\n      : (bkgImage = '')\r\n\r\n    return (\r\n      <div className=\"race-preview\">\r\n        <div>\r\n          <img src={bkgImage} alt=\"race-image\" height=\"600px\" width=\"420px\" />\r\n        </div>\r\n        <Link to={`/races/${index}`}>{name}</Link>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DisplayRace\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\Classes.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\profile\\displayCharacters\\DisplayUserCharacters.jsx",["325"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getAllUserCharacters } from '../../../redux/reducers'\r\n\r\nimport { Link } from 'react-router-dom'\r\nclass DisplayUserCharacters extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      await this.props.getAllUserCharacters(this.props.id)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"user-character-container\">\r\n        <h1>Characters</h1>\r\n        <div id=\"usercharacter\">\r\n          {this.props.characters !== undefined ? (\r\n            this.props.characters.map((item, index) => {\r\n              return (\r\n                <Link\r\n                  to={`/character/${item.id}`}\r\n                  style={{ textDecoration: 'none' }}\r\n                  key={index}\r\n                >\r\n                  <h3 id=\"character-name\">{item.name}</h3>\r\n                </Link>\r\n              )\r\n            })\r\n          ) : (\r\n            <h1>Loading</h1>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    characters: state.characters.characters,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllUserCharacters: (id) => dispatch(getAllUserCharacters(id)),\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DisplayUserCharacters)\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\profile\\displayUser\\UserProfile.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\Skill.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\subclasses\\DisplaySubClass.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\subclasses\\SubClassSpells.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\startingEquipment\\DisplayClass.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\Subclass.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCasting.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\SavingThrows.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\Proficiencies.jsx",["326"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport '../../../../../css/individualclass.css'\r\nclass Proficiencies extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"profs\">\r\n        <Link\r\n          to={`/proficiencies/${this.props.classIndex}`}\r\n          style={{ textDecoration: 'none' }}\r\n        >\r\n          <h4 className=\"fix-h1-h2-h3-h4-name\">\r\n            \r\n            {this.props.name}\r\n          </h4>\r\n        </Link>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Proficiencies\r\n","D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\features\\DisplayFeatures.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\features\\FeatureChoice.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\Choices.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\DisplayClass.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\PChoices.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCastingInfo.jsx",[],"D:\\Downlaods\\TTP Internship\\CAPSTONE\\main\\frontend\\DND-Capstone-FrontEnd\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCastingDesc.jsx",[],["327","328"],{"ruleId":"329","replacedBy":"330"},{"ruleId":"331","replacedBy":"332"},{"ruleId":"333","severity":1,"message":"334","line":6,"column":8,"nodeType":"335","messageId":"336","endLine":6,"endColumn":19},{"ruleId":"333","severity":1,"message":"337","line":1,"column":8,"nodeType":"335","messageId":"336","endLine":1,"endColumn":13},{"ruleId":"333","severity":1,"message":"338","line":36,"column":8,"nodeType":"335","messageId":"336","endLine":36,"endColumn":23},{"ruleId":"333","severity":1,"message":"339","line":8,"column":9,"nodeType":"335","messageId":"336","endLine":8,"endColumn":13},{"ruleId":"340","severity":1,"message":"341","line":22,"column":9,"nodeType":"342","endLine":25,"endColumn":10},{"ruleId":"333","severity":1,"message":"343","line":2,"column":8,"nodeType":"335","messageId":"336","endLine":2,"endColumn":13},{"ruleId":"344","severity":1,"message":"345","line":190,"column":48,"nodeType":"346","messageId":"347","endLine":190,"endColumn":49},{"ruleId":"348","severity":1,"message":"349","line":53,"column":13,"nodeType":"342","endLine":53,"endColumn":59},{"ruleId":"350","severity":1,"message":"351","line":10,"column":3,"nodeType":"352","messageId":"353","endLine":12,"endColumn":4},{"ruleId":"348","severity":1,"message":"349","line":97,"column":23,"nodeType":"342","endLine":103,"endColumn":24},{"ruleId":"348","severity":1,"message":"349","line":106,"column":23,"nodeType":"342","endLine":112,"endColumn":24},{"ruleId":"348","severity":1,"message":"349","line":115,"column":23,"nodeType":"342","endLine":121,"endColumn":24},{"ruleId":"348","severity":1,"message":"349","line":124,"column":23,"nodeType":"342","endLine":130,"endColumn":24},{"ruleId":"348","severity":1,"message":"349","line":133,"column":23,"nodeType":"342","endLine":139,"endColumn":24},{"ruleId":"348","severity":1,"message":"349","line":142,"column":23,"nodeType":"342","endLine":148,"endColumn":24},{"ruleId":"348","severity":1,"message":"349","line":151,"column":23,"nodeType":"342","endLine":157,"endColumn":24},{"ruleId":"348","severity":1,"message":"349","line":160,"column":23,"nodeType":"342","endLine":166,"endColumn":24},{"ruleId":"348","severity":1,"message":"349","line":169,"column":23,"nodeType":"342","endLine":175,"endColumn":24},{"ruleId":"344","severity":1,"message":"345","line":135,"column":53,"nodeType":"346","messageId":"347","endLine":135,"endColumn":54},{"ruleId":"329","replacedBy":"354"},{"ruleId":"331","replacedBy":"355"},{"ruleId":"350","severity":1,"message":"351","line":12,"column":5,"nodeType":"352","messageId":"353","endLine":14,"endColumn":6},{"ruleId":"350","severity":1,"message":"351","line":11,"column":5,"nodeType":"352","messageId":"353","endLine":13,"endColumn":6},{"ruleId":"350","severity":1,"message":"351","line":11,"column":5,"nodeType":"352","messageId":"353","endLine":13,"endColumn":6},{"ruleId":"350","severity":1,"message":"351","line":8,"column":3,"nodeType":"352","messageId":"353","endLine":10,"endColumn":4},{"ruleId":"350","severity":1,"message":"351","line":15,"column":3,"nodeType":"352","messageId":"353","endLine":29,"endColumn":4},{"ruleId":"348","severity":1,"message":"349","line":41,"column":11,"nodeType":"342","endLine":41,"endColumn":79},{"ruleId":"350","severity":1,"message":"351","line":7,"column":3,"nodeType":"352","messageId":"353","endLine":9,"endColumn":4},{"ruleId":"350","severity":1,"message":"351","line":5,"column":3,"nodeType":"352","messageId":"353","endLine":7,"endColumn":4},{"ruleId":"329","replacedBy":"356"},{"ruleId":"331","replacedBy":"357"},"no-native-reassign",["358"],"no-negated-in-lhs",["359"],"no-unused-vars","'ScrollToTop' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","'CreateCharacter' is defined but never used.","'bool' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'axios' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["358"],["359"],["358"],["359"],"no-global-assign","no-unsafe-negation"]