[{"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\index.js":"1","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\App.js":"2","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\reportWebVitals.js":"3","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\redux\\store.js":"4","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\helper\\scroll-to-top.js":"5","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\Routes\\Routes.jsx":"6","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\navbar\\Navbar.jsx":"7","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\Homepage.js":"8","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\redux\\reducers\\index.js":"9","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\AllCharacters.js":"10","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\LoginPage.js":"11","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\spells\\IndividualSpell.js":"12","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\characterCreation\\CreateCharacter.js":"13","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\SignUpForm.jsx":"14","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\spells\\Spells.jsx":"15","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\Classes.jsx":"16","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\features\\IndividualFeature.jsx":"17","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\StartingEquipments.jsx":"18","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\subclasses\\SubClasses.jsx":"19","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\AllEquipment.jsx":"20","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\features\\Features.jsx":"21","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\subclasses\\IndividualSubClass.jsx":"22","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\DisplayEquipment.jsx":"23","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\Races.jsx":"24","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\IndividualEquipment.jsx":"25","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\Bonus.jsx":"26","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\IndividualRace.jsx":"27","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\Language.jsx":"28","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\Trait.jsx":"29","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\monsters\\Monsters.jsx":"30","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\Proficiency.jsx":"31","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\monsters\\ConditionImmunity.jsx":"32","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\profile\\Profile.jsx":"33","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\monsters\\IndividualMonster.jsx":"34","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\builds\\Builds.jsx":"35","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\editCharacters\\EditCharacter.jsx":"36","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\characterCreation\\CharacterCreationForm.jsx":"37","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\builds\\DisplayCharacter.jsx":"38","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\IndividualClass.jsx":"39","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\Skills.jsx":"40","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\ClassLevels.jsx":"41","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\DisplayProficiencies.jsx":"42","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\ClassSpells.jsx":"43","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\redux\\reducers\\actionTypes.js":"44","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\spells\\SpellDisplay.js":"45","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\Classes.jsx":"46","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\subclasses\\SubClass.jsx":"47","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\StartingEquipment.jsx":"48","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\features\\Feature.jsx":"49","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\DisplayClass.jsx":"50","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\features\\FeatureChoice.jsx":"51","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\subclasses\\DisplaySubClass.jsx":"52","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\features\\DisplayFeatures.jsx":"53","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\monsters\\DisplayMonster.jsx":"54","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\DisplayRace.jsx":"55","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\Options.jsx":"56","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\subclasses\\SubClassSpells.jsx":"57","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\profile\\displayUser\\UserProfile.jsx":"58","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\profile\\displayCharacters\\DisplayUserCharacters.jsx":"59","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCasting.jsx":"60","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\SavingThrows.jsx":"61","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\Proficiencies.jsx":"62","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\Subclass.jsx":"63","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\Choices.jsx":"64","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\Skill.jsx":"65","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\DisplayClass.jsx":"66","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\PChoices.jsx":"67","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCastingInfo.jsx":"68","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCastingDesc.jsx":"69"},{"size":614,"mtime":1611615455123,"results":"70","hashOfConfig":"71"},{"size":619,"mtime":1612064835006,"results":"72","hashOfConfig":"71"},{"size":375,"mtime":1611615455125,"results":"73","hashOfConfig":"71"},{"size":277,"mtime":1611615455125,"results":"74","hashOfConfig":"71"},{"size":359,"mtime":1611939044530,"results":"75","hashOfConfig":"71"},{"size":5820,"mtime":1612040483755,"results":"76","hashOfConfig":"71"},{"size":3511,"mtime":1611984293704,"results":"77","hashOfConfig":"71"},{"size":1835,"mtime":1611959928653,"results":"78","hashOfConfig":"71"},{"size":11593,"mtime":1612061331168,"results":"79","hashOfConfig":"71"},{"size":756,"mtime":1611959935931,"results":"80","hashOfConfig":"71"},{"size":2392,"mtime":1611959161989,"results":"81","hashOfConfig":"71"},{"size":8402,"mtime":1612063130304,"results":"82","hashOfConfig":"71"},{"size":384,"mtime":1611960645020,"results":"83","hashOfConfig":"71"},{"size":4224,"mtime":1611948299507,"results":"84","hashOfConfig":"71"},{"size":1939,"mtime":1612068020384,"results":"85","hashOfConfig":"71"},{"size":715,"mtime":1611969654609,"results":"86","hashOfConfig":"71"},{"size":3893,"mtime":1612068088945,"results":"87","hashOfConfig":"71"},{"size":1138,"mtime":1612064086211,"results":"88","hashOfConfig":"71"},{"size":1118,"mtime":1612064047954,"results":"89","hashOfConfig":"71"},{"size":1485,"mtime":1612064315548,"results":"90","hashOfConfig":"71"},{"size":1103,"mtime":1612064103674,"results":"91","hashOfConfig":"71"},{"size":2898,"mtime":1612068062588,"results":"92","hashOfConfig":"71"},{"size":5656,"mtime":1611985806987,"results":"93","hashOfConfig":"71"},{"size":1220,"mtime":1611959701469,"results":"94","hashOfConfig":"71"},{"size":3363,"mtime":1612068073403,"results":"95","hashOfConfig":"71"},{"size":1998,"mtime":1612064498890,"results":"96","hashOfConfig":"71"},{"size":9557,"mtime":1611959674260,"results":"97","hashOfConfig":"71"},{"size":2103,"mtime":1611959685685,"results":"98","hashOfConfig":"71"},{"size":2867,"mtime":1611959712333,"results":"99","hashOfConfig":"71"},{"size":1358,"mtime":1611976531788,"results":"100","hashOfConfig":"71"},{"size":2127,"mtime":1611959696817,"results":"101","hashOfConfig":"71"},{"size":2103,"mtime":1611966935780,"results":"102","hashOfConfig":"71"},{"size":1135,"mtime":1611959657572,"results":"103","hashOfConfig":"71"},{"size":7348,"mtime":1611976531787,"results":"104","hashOfConfig":"71"},{"size":1486,"mtime":1612068301489,"results":"105","hashOfConfig":"71"},{"size":26197,"mtime":1612063113902,"results":"106","hashOfConfig":"71"},{"size":27224,"mtime":1612067933485,"results":"107","hashOfConfig":"71"},{"size":15029,"mtime":1612061604491,"results":"108","hashOfConfig":"71"},{"size":5893,"mtime":1612068109121,"results":"109","hashOfConfig":"71"},{"size":1535,"mtime":1611974668283,"results":"110","hashOfConfig":"71"},{"size":5429,"mtime":1612063101415,"results":"111","hashOfConfig":"71"},{"size":3173,"mtime":1612068120003,"results":"112","hashOfConfig":"71"},{"size":1353,"mtime":1611986099996,"results":"113","hashOfConfig":"71"},{"size":800,"mtime":1612046972432,"results":"114","hashOfConfig":"71"},{"size":330,"mtime":1611976531790,"results":"115","hashOfConfig":"71"},{"size":1103,"mtime":1612064118240,"results":"116","hashOfConfig":"71"},{"size":333,"mtime":1611864155618,"results":"117","hashOfConfig":"71"},{"size":385,"mtime":1611864826234,"results":"118","hashOfConfig":"71"},{"size":324,"mtime":1611864514799,"results":"119","hashOfConfig":"71"},{"size":398,"mtime":1611959495489,"results":"120","hashOfConfig":"71"},{"size":335,"mtime":1612064284276,"results":"121","hashOfConfig":"71"},{"size":386,"mtime":1611959527944,"results":"122","hashOfConfig":"71"},{"size":384,"mtime":1611939720315,"results":"123","hashOfConfig":"71"},{"size":337,"mtime":1611960027298,"results":"124","hashOfConfig":"71"},{"size":1515,"mtime":1611877100771,"results":"125","hashOfConfig":"71"},{"size":399,"mtime":1611959874840,"results":"126","hashOfConfig":"71"},{"size":634,"mtime":1611941876637,"results":"127","hashOfConfig":"71"},{"size":513,"mtime":1611949237418,"results":"128","hashOfConfig":"71"},{"size":1466,"mtime":1612068141521,"results":"129","hashOfConfig":"71"},{"size":750,"mtime":1611985560417,"results":"130","hashOfConfig":"71"},{"size":310,"mtime":1611959335171,"results":"131","hashOfConfig":"71"},{"size":537,"mtime":1612068153820,"results":"132","hashOfConfig":"71"},{"size":305,"mtime":1611959396115,"results":"133","hashOfConfig":"71"},{"size":496,"mtime":1612064126884,"results":"134","hashOfConfig":"71"},{"size":1622,"mtime":1611974837443,"results":"135","hashOfConfig":"71"},{"size":383,"mtime":1611959264846,"results":"136","hashOfConfig":"71"},{"size":355,"mtime":1611942284282,"results":"137","hashOfConfig":"71"},{"size":488,"mtime":1612064165148,"results":"138","hashOfConfig":"71"},{"size":206,"mtime":1612064161534,"results":"139","hashOfConfig":"71"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},"uccce9",{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"142"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"142"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"142"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"142"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"142"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"142"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"142"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"142"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\index.js",[],["287","288"],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\App.js",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\reportWebVitals.js",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\redux\\store.js",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\helper\\scroll-to-top.js",["289"],"import React, { Component } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass ScrollToTop extends Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      window.scrollTo(0, 0)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default withRouter(ScrollToTop)\r\n","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\Routes\\Routes.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\navbar\\Navbar.jsx",["290"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { logoutUser } from '../../redux/reducers'\r\nimport '../../css/Navbar.css'\r\nclass Navbar extends React.Component {\r\n  render() {\r\n    let bool = false\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/\" style={{ textDecoration: 'none' }}>Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/classes\" style={{ textDecoration: 'none' }}>Classes</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/races\" style={{ textDecoration: 'none' }}>Races</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/spells\" style={{ textDecoration: 'none' }}>Spells</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/monsters\" style={{ textDecoration: 'none' }}>Monsters</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/builds\">Characters</Link>\r\n              </li>\r\n\r\n              {this.props.currentUser !== undefined ? (\r\n                this.props.currentUser.token !== undefined ? (\r\n                  <li className=\"nav-item\">\r\n                    <Link to=\"/CharacterCreation\" style={{ textDecoration: 'none' }}>Create Character</Link>\r\n                  </li>\r\n                ) : (\r\n                  <span />\r\n                )\r\n              ) : (\r\n                <span />\r\n              )}\r\n\r\n              <div id=\"dropdown\" className=\"dropdown\">\r\n                <li className=\"dropbtn\">Profile</li>\r\n                <div className=\"dropdown-content\">\r\n                  {this.props.currentUser ? (\r\n                    <span>\r\n                      <Link to=\"/userprofile\" style={{ textDecoration: 'none' }}>User Profile</Link>\r\n                      <Link to=\"/\" onClick={(e) => this.props.logoutUser()} style={{ textDecoration: 'none' }}>\r\n                        Logout\r\n                      </Link>\r\n                    </span>\r\n                  ) : (\r\n                    <span>\r\n                      <Link to=\"/signup\" style={{ textDecoration: 'none' }}>Sign Up</Link>\r\n                      <Link to=\"/login\" style={{ textDecoration: 'none' }}>Login</Link>\r\n                    </span>\r\n                  )}\r\n\r\n                  {/* {this.props.currentUser !== undefined ? (\r\n                    this.props.currentUser.token !== undefined ? (\r\n                      <Link to=\"/\" onClick={(e) => this.props.logoutUser()}>\r\n                        Logout\r\n                      </Link>\r\n                    ) : (\r\n                      <span />\r\n                    )\r\n                  ) : (\r\n                    <span />\r\n                  )} */}\r\n                </div>\r\n              </div>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.currentLoggedInUserInfo,\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    logoutUser: () => dispatch(logoutUser()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar)\r\n","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\Homepage.js",["291"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getAllClasses } from '../redux/reducers'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport '../css/homepage.css'\r\nclass Homepage extends Component {\r\n  async componentDidMount() {\r\n    await this.props.getAllClasses()\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"homepage\">\r\n        {/* <div className=\"pls-work-img\">\r\n          <img\r\n            src=\"https://wallpapercave.com/wp/wp2227193.jpg\"\r\n            alt=\"main-img\"\r\n            width=\"100%\"\r\n            z-index=\"-1\"\r\n          />\r\n        </div> */}\r\n        <img\r\n          className=\"home-page-logo\"\r\n          src=\"https://dragonfirethegame.com/wp-content/uploads/2017/04/logo-dnd.png\"\r\n        ></img>\r\n\r\n        {this.props.currentUser ? (\r\n          <div>\r\n            <Link to=\"CharacterCreation\">\r\n              <button className=\"chara-create-btn\">Create A Character!</button>{' '}\r\n            </Link>\r\n          </div>\r\n        ) : (\r\n          <div className=\"maybe-fix-2\">\r\n            <Link to=\"/login\">\r\n              <button className=\"login-btn\">Login To Create Character</button>\r\n            </Link>\r\n            <Link to=\"/signup\">\r\n              <button className=\"signup-btn\">Sign Up To Create Account</button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapState = (state) => {\r\n  return {\r\n    classes: state.classes,\r\n    currentUser: state.currentLoggedInUserInfo,\r\n  }\r\n}\r\n\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    getAllClasses: () => dispatch(getAllClasses()),\r\n  }\r\n}\r\nexport default connect(mapState, mapDispatch)(Homepage)\r\n\r\n// we should get the values on the \"create your chara\" page b/c\r\n// if the user refreshes on that page, state will be reset and\r\n// the options will be blank\r\n","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\redux\\reducers\\index.js",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\AllCharacters.js",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\LoginPage.js",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\spells\\IndividualSpell.js",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\characterCreation\\CreateCharacter.js",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\SignUpForm.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\spells\\Spells.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\Classes.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\features\\IndividualFeature.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\StartingEquipments.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\subclasses\\SubClasses.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\AllEquipment.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\features\\Features.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\subclasses\\IndividualSubClass.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\DisplayEquipment.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\Races.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\IndividualEquipment.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\Bonus.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\IndividualRace.jsx",["292"],"import React, { Component } from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { getApiData } from '../../redux/reducers'\r\n\r\nimport '../../css/single-race.css'\r\nimport { Link } from 'react-router-dom'\r\nimport dragonborn from './dnd race images/dragonborn.png'\r\nimport dwarf from './dnd race images/dwarf.png'\r\nimport elf from './dnd race images/elf.png'\r\nimport gnome from './dnd race images/gnome.png'\r\nimport halfElf from './dnd race images/half-elf.png'\r\nimport halfling from './dnd race images/halfling.png'\r\nimport halfOrc from './dnd race images/half-orc.png'\r\nimport human from './dnd race images/human.png'\r\nimport tiefling from './dnd race images/tiefling.png'\r\n\r\nclass IndividualRace extends Component {\r\n  componentDidMount = () => {\r\n    const race = 'races/' + this.props.match.params.race\r\n    this.props.getApiData(race)\r\n  }\r\n\r\n  render() {\r\n    const { race } = this.props.match.params\r\n    let bkgImage\r\n    race === 'dragonborn'\r\n      ? (bkgImage = dragonborn)\r\n      : race === 'dwarf'\r\n      ? (bkgImage = dwarf)\r\n      : race === 'elf'\r\n      ? (bkgImage = elf)\r\n      : race === 'gnome'\r\n      ? (bkgImage = gnome)\r\n      : race === 'half-elf'\r\n      ? (bkgImage = halfElf)\r\n      : race === 'halfling'\r\n      ? (bkgImage = halfling)\r\n      : race === 'half-orc'\r\n      ? (bkgImage = halfOrc)\r\n      : race === 'human'\r\n      ? (bkgImage = human)\r\n      : race === 'tiefling'\r\n      ? (bkgImage = tiefling)\r\n      : (bkgImage = '')\r\n    return (\r\n      <div className=\"signle-race-root-container\">\r\n        <div className=\"single-race-title\">\r\n          <h1>Race: {this.props.race.name}</h1>\r\n        </div>\r\n        <div className=\"single-race-container\">\r\n          <div className=\"single-race-image\">\r\n            <img src={bkgImage} alt=\"single-race-image\" />\r\n          </div>\r\n\r\n          {/* <div className=\"clear-float\"></div> */}\r\n\r\n          <div className=\"single-race-info\">\r\n            <div className=\"race-info-title\">\r\n              <h3>Age</h3>\r\n            </div>\r\n            <div className=\"race-info\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.age}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Alignment</h3>\r\n            </div>\r\n            <div className=\"race-info\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.alignment}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Language Description</h3>\r\n            </div>\r\n            <div className=\"race-info\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.language_desc}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Languages</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.ability_bonuses !== undefined ? (\r\n                this.props.race.languages.map((element, index) => {\r\n                  return (\r\n                    <div key={index}>\r\n                      <Link to={`/languages/${element.index}`}>\r\n                        <p>{element.name}</p>\r\n                      </Link>\r\n                    </div>\r\n                  )\r\n                })\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Size</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.size}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Size Description</h3>\r\n            </div>\r\n            <div className=\"race-info\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.size_description}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Ability Bonuses</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.ability_bonuses !== undefined ? (\r\n                this.props.race.ability_bonuses.map((element, index) => {\r\n                  return (\r\n                    <div key={index}>\r\n                      <Link to={`/bonus/${element.ability_score.index}`}>\r\n                        <p>{element.ability_score.name}</p>\r\n                      </Link>\r\n                      <h4>Bonus</h4>\r\n                      <p>{element.bonus}</p>\r\n                    </div>\r\n                  )\r\n                })\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Speed</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race !== undefined ? (\r\n                <div>\r\n                  <p>{this.props.race.speed}</p>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Starting Proficiencies</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.starting_proficiencies !== undefined ? (\r\n                this.props.race.starting_proficiencies.length !== 0 ? (\r\n                  this.props.race.starting_proficiencies.map(\r\n                    (element, index) => {\r\n                      return (\r\n                        <div key={index}>\r\n                          <p>{element.name}</p>\r\n                        </div>\r\n                      )\r\n                    }\r\n                  )\r\n                ) : (\r\n                  <div>\r\n                    <p>None</p>\r\n                  </div>\r\n                )\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Starting Proficiency Options</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.starting_proficiency_options !== undefined ? (\r\n                <div>\r\n                  Choose: {this.props.race.starting_proficiency_options.choose}\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <p>Choose: None</p>\r\n                </div>\r\n              )}\r\n\r\n              {this.props.race.starting_proficiency_options !== undefined ? (\r\n                this.props.race.starting_proficiency_options.from.length !==\r\n                0 ? (\r\n                  this.props.race.starting_proficiency_options.from.map(\r\n                    (element, index) => {\r\n                      return (\r\n                        <div key={index}>\r\n                          <Link to={`/races/proficiencies/${element.index}`}>\r\n                            <p>{element.name}</p>\r\n                          </Link>\r\n                        </div>\r\n                      )\r\n                    }\r\n                  )\r\n                ) : (\r\n                  <div>\r\n                    <p>None</p>\r\n                  </div>\r\n                )\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Sub Races</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.subraces !== undefined ? (\r\n                this.props.race.subraces.length !== 0 ? (\r\n                  this.props.race.subraces.map((element, index) => {\r\n                    return (\r\n                      <div key={index}>\r\n                        <p>{element.name}</p>\r\n                      </div>\r\n                    )\r\n                  })\r\n                ) : (\r\n                  <div>\r\n                    <p>None</p>\r\n                  </div>\r\n                )\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"race-info-title\">\r\n              <h3>Traits</h3>\r\n            </div>\r\n            <div className=\"race-info-bits\">\r\n              {this.props.race.traits !== undefined ? (\r\n                this.props.race.traits.map((element, index) => {\r\n                  return (\r\n                    <div key={index}>\r\n                      <Link to={`/traits/${element.index}`}>\r\n                        <p>{element.name}</p>\r\n                      </Link>\r\n                    </div>\r\n                  )\r\n                })\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    race: state.dndData,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getApiData: (searchApi) => dispatch(getApiData(searchApi)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IndividualRace)\r\n","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\Language.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\Trait.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\monsters\\Monsters.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\Proficiency.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\monsters\\ConditionImmunity.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\profile\\Profile.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\monsters\\IndividualMonster.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\builds\\Builds.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\editCharacters\\EditCharacter.jsx",["293"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { connect } from 'react-redux'\r\nimport {\r\n    getAllClasses,\r\n    getAllRaces,\r\n    getAllSkills,\r\n    getSingleCharacter\r\n} from '../../redux/reducers'\r\nimport '../../css/charactercreation.css'\r\nclass EditCharacter extends React.Component {\r\n    constructor ( props ) {\r\n        super( props )\r\n        this.state = {\r\n            characterInfo: {\r\n                characterName: '',\r\n                class: '',\r\n                race: '',\r\n                gender: '',\r\n                proficiencyBonus: '2',\r\n                armorClass: 10,\r\n                initiative: 0,\r\n                speed: 0,\r\n                skills: [],\r\n                str: 0,\r\n                dex: 0,\r\n                con: 0,\r\n                int: 0,\r\n                wis: 0,\r\n                cha: 0,\r\n                personalityTraits: '',\r\n                flaws: '',\r\n                ideals: '',\r\n                userId: '',\r\n            },\r\n            public: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await this.props.getAllClasses()\r\n        await this.props.getAllRaces()\r\n        await this.props.getAllSkills()\r\n        await this.props.getSingleCharacter( this.props.match.params.id )\r\n        this.setState( {\r\n            characterInfo: {\r\n                characterName: this.props.character.characterName,\r\n                class: this.props.character.class,\r\n                race: this.props.character.race,\r\n                gender: this.props.character.gender,\r\n                str: this.props.character.str,\r\n                dex: this.props.character.dex,\r\n                con: this.props.character.con,\r\n                int: this.props.character.int,\r\n                wis: this.props.character.wis,\r\n                cha: this.props.character.cha,\r\n                personalityTraits: this.props.character.personalityTraits,\r\n                flaws: this.props.character.flaws,\r\n                ideals: this.props.character.ideals,\r\n                userId: this.props.character.userId,\r\n            }\r\n        } )\r\n    }\r\n\r\n    handleClassSelectChange = ( e ) => {\r\n        this.setState( {\r\n            characterInfo: {\r\n                ...this.state.characterInfo,\r\n                class: e.target.value,\r\n            },\r\n        } )\r\n    }\r\n\r\n    handleRaceSelectChange = ( e ) => {\r\n        const { value } = e.target\r\n\r\n        if (\r\n            value === 'dragonborn' ||\r\n            value === 'elf' ||\r\n            value === 'half-elf' ||\r\n            value === 'half-orc' ||\r\n            value === 'human' ||\r\n            value === 'tiefling'\r\n        ) {\r\n            this.setState( {\r\n                characterInfo: {\r\n                    ...this.state.characterInfo,\r\n                    race: e.target.value,\r\n                    speed: 30,\r\n                },\r\n            } )\r\n        } else {\r\n            this.setState( {\r\n                characterInfo: {\r\n                    ...this.state.characterInfo,\r\n                    race: e.target.value,\r\n                    speed: 25,\r\n                },\r\n            } )\r\n        }\r\n    }\r\n\r\n    handleGenderSelectChange = ( e ) => {\r\n        this.setState( {\r\n            characterInfo: {\r\n                ...this.state.characterInfo,\r\n                gender: e.target.value,\r\n            },\r\n        } )\r\n    }\r\n\r\n    handleSkillsSelectChange = ( e ) => {\r\n        if ( this.state.characterInfo.skills.length === 4 ) {\r\n            alert( 'You may only have 4 skills per character!' )\r\n            return\r\n        }\r\n        for ( const skill of this.state.characterInfo.skills ) {\r\n            if ( skill === e.target.value ) {\r\n                alert( 'No duplicate skills allowed!' )\r\n                return\r\n            }\r\n        }\r\n\r\n        this.setState( {\r\n            characterInfo: {\r\n                ...this.state.characterInfo,\r\n                skills: [ ...this.state.characterInfo.skills, e.target.value ], // append skill to array\r\n            },\r\n        } )\r\n    }\r\n\r\n    handleAbilityScoreChange = ( e ) => {\r\n        let modifier = Math.floor( ( parseInt( e.target.value ) - 10 ) / 2 )\r\n        document.getElementById( `${e.target.name}` + '-modifier' ).innerHTML =\r\n            '+' + modifier\r\n\r\n        if ( e.target.name === 'dex' ) {\r\n            this.setState( {\r\n                characterInfo: {\r\n                    ...this.state.characterInfo,\r\n                    [ e.target.name ]: e.target.value,\r\n                    armorClass: 10 + modifier,\r\n                },\r\n            } )\r\n        } else {\r\n            this.setState( {\r\n                characterInfo: {\r\n                    ...this.state.characterInfo,\r\n                    [ e.target.name ]: e.target.value,\r\n                },\r\n            } )\r\n        }\r\n    }\r\n\r\n    handleMainStatChange = ( e ) => {\r\n        this.setState( {\r\n            characterInfo: {\r\n                ...this.state.characterInfo,\r\n                [ e.target.name ]: e.target.value,\r\n            },\r\n        } )\r\n    }\r\n\r\n    handleDisplayStatusChange = ( e ) => {\r\n        this.setState( {\r\n            public: e.target.value,\r\n        } )\r\n    }\r\n\r\n    handleTextareaChange = ( e ) => {\r\n        this.setState( {\r\n            characterInfo: {\r\n                ...this.state.characterInfo,\r\n                [ e.target.name ]: e.target.value,\r\n            },\r\n        } )\r\n    }\r\n\r\n    handleFormSubmit = ( e ) => {\r\n        e.preventDefault()\r\n        if ( this.state.public === 'false' ) {\r\n            this.setState( {\r\n                characterInfo: {\r\n                    ...this.state.characterInfo,\r\n                    userId: this.props.currentUser.userId,\r\n                },\r\n            } )\r\n        } else {\r\n            delete this.state.characterInfo.userId\r\n        }\r\n\r\n         setTimeout(() => {\r\n            this.props.updateCharacter(\r\n                this.state.characterInfo,\r\n                this.props.match.params.id\r\n              )\r\n        }, 1200) \r\n        setTimeout( () => {\r\n            if ( this.props.newCharacter !== undefined ) {\r\n                if ( this.state.public === 'true' ) {\r\n                    this.props.history.push( '/builds' )\r\n                } else {\r\n                    this.props.history.push( '/userprofile' )\r\n                }\r\n            }\r\n        }, 2000 )\r\n        /* } */\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"creation-form\">\r\n                <header>DUNGEONS { '&' } DRAGONS CHARACTER EDIT FORM</header>\r\n\r\n                <div id=\"character-creation-form\">\r\n                    {/* Main Character Creation Form */ }\r\n                    <form onSubmit={ ( e ) => this.handleFormSubmit( e ) }>\r\n                        {/* Character Name */ }\r\n                        <div id=\"character-creation-name\">\r\n                            <label>\r\n                                Character Name:<br></br>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"characterName\"\r\n                                    defaultValue={ this.state.characterInfo.characterName }\r\n                                    onChange={ ( e ) =>\r\n                                        this.setState( {\r\n                                            characterInfo: {\r\n                                                ...this.state.characterInfo,\r\n                                                characterName: e.target.value,\r\n                                            },\r\n                                        } )\r\n                                    }\r\n                                    required\r\n                                ></input>\r\n                            </label>\r\n                        </div>\r\n                        <br></br>\r\n                        {/* End Character Name */ }\r\n\r\n                        {/* Class Select */ }\r\n                        <div id=\"class-select\">\r\n                            <label>\r\n                                Select Your Classes<br></br>\r\n                                <select\r\n                                    name=\"classSelect\"\r\n                                    onChange={ ( e ) => this.handleClassSelectChange( e ) }\r\n                                    required\r\n                                >\r\n                                    <option value=\"\">--Choose Your Class--</option>\r\n                                    { this.props.allClasses !== undefined ? (\r\n                                        this.props.allClasses.map( ( element, index ) => {\r\n                                            return (\r\n                                                <option key={ index } value={ element.index }>\r\n                                                    {element.name }\r\n                                                </option>\r\n                                            )\r\n                                        } )\r\n                                    ) : (\r\n                                            <span />\r\n                                        ) }\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n                        {/* End Class Select */ }\r\n\r\n                        <br></br>\r\n                        {/* Race Select */ }\r\n                        <div id=\"race-select\">\r\n                            <label>\r\n                                Select Your Race\r\n                <br></br>\r\n                                <select\r\n                                    name=\"raceSelect\"\r\n                                    onChange={ ( e ) => this.handleRaceSelectChange( e ) }\r\n                                    required\r\n                                >\r\n                                    <option value=\"\">--Choose Your Race--</option>\r\n                                    { this.props.allRaces !== undefined ? (\r\n                                        this.props.allRaces.map( ( element, index ) => {\r\n                                            return (\r\n                                                <option key={ index } value={ element.index }>\r\n                                                    {element.name }\r\n                                                </option>\r\n                                            )\r\n                                        } )\r\n                                    ) : (\r\n                                            <span />\r\n                                        ) }\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n                        {/* End Race Select */ }\r\n\r\n                        <br></br>\r\n                        {/* Gender Select */ }\r\n                        <div id=\"gender-choices\">\r\n                            <div className=\"gender-male\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id=\"male\"\r\n                                    name=\"gender\"\r\n                                    value=\"male\"\r\n                                    onChange={ ( e ) => this.handleGenderSelectChange( e ) }\r\n                                ></input>\r\n                                <label htmlFor=\"male\">Male</label>\r\n                            </div>\r\n                            <div className=\"gender-female\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id=\"female\"\r\n                                    name=\"gender\"\r\n                                    value=\"female\"\r\n                                    onChange={ ( e ) => this.handleGenderSelectChange( e ) }\r\n                                ></input>\r\n                                <label htmlFor=\"female\">Female</label>\r\n                            </div>\r\n                            <div className=\"gender-other\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id=\"other\"\r\n                                    name=\"gender\"\r\n                                    value=\"other\"\r\n                                    onChange={ ( e ) => this.handleGenderSelectChange( e ) }\r\n                                ></input>\r\n                                <label htmlFor=\"other\">Other</label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* End Gender Select  */ }\r\n\r\n                        {/* Main Stats */ }\r\n                        <div id=\"character-prof-bonus\">\r\n                            <label>\r\n                                Proficiency Bonus (+2 For Lvl.1) :\r\n                <span\r\n                                    id=\"proficiencyBonus-display\"\r\n                                    // type=\"number\"\r\n                                    name=\"proficiencyBonus\"\r\n                                    // placeholder={Math.floor(Math.random() * 6)}\r\n                                    // defaultValue={Math.floor(Math.random() * 6)}\r\n                                    value=\"2\"\r\n                                    onChange={ ( e ) =>\r\n                                        alert( 'A lvl.1 character has +2 proficieny bonus!' )\r\n                                    }\r\n                                    required\r\n                                >\r\n                                    { ' ' }\r\n                                    { this.state.characterInfo.proficiencyBonus }\r\n                                </span>\r\n                            </label>\r\n                        </div>\r\n                        <div id=\"other-main-stats\">\r\n                            <label>\r\n                                Armor Class :\r\n                <span\r\n                                    id=\"armorClass-display\"\r\n                                    type=\"number\"\r\n                                    name=\"armorClass\"\r\n                                    required\r\n                                >\r\n                                    { ' ' }\r\n                                    { this.state.characterInfo.armorClass }\r\n                                </span>\r\n                            </label>\r\n\r\n                            {/* <br></br>\r\n          <label>\r\n            Initiative\r\n            <br></br>\r\n            <input\r\n              type=\"number\"\r\n              name=\"Initiative\"\r\n              placeholder={ Math.floor( Math.random() * 15 ) }\r\n              // defaultValue={Math.floor(Math.random() * 15)}\r\n              onChange={ ( e ) => this.handleMainStatChange( e ) }\r\n              required\r\n            ></input>\r\n          </label> */}\r\n\r\n                            <br></br>\r\n                            <label>\r\n                                Speed :\r\n                <span\r\n                                    id=\"speed-display\"\r\n                                    type=\"number\"\r\n                                    name=\"speed\"\r\n                                    value={ this.state.characterInfo.speed }\r\n                                    required\r\n                                >\r\n                                    { ' ' }\r\n                                    { this.state.characterInfo.speed }\r\n                                </span>\r\n                            </label>\r\n                            <br></br>\r\n                        </div>\r\n                        {/* End Main Stats */ }\r\n\r\n                        {/* Skill Select */ }\r\n                        <div id=\"select-character-skill\">\r\n                            <label>\r\n                                Reselect Your Skills (Choose up to 4)\r\n                <br></br>\r\n                                <select\r\n                                    name=\"skillsSelect\"\r\n                                    onChange={ ( e ) => this.handleSkillsSelectChange( e ) }\r\n                                    required\r\n                                >\r\n                                    <option value=\"\">--Choose Your Skills--</option>\r\n                                    { this.props.allSkills !== undefined ? (\r\n                                        this.props.allSkills.map( ( element, index ) => {\r\n                                            return (\r\n                                                <option key={ index } value={ element.index }>\r\n                                                    {element.name }\r\n                                                </option>\r\n                                            )\r\n                                        } )\r\n                                    ) : (\r\n                                            <span />\r\n                                        ) }\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n                        {/* End Skill Select */ }\r\n\r\n                        <br></br>\r\n                        {/* Ability Scores */ }\r\n                        <div id=\"character-attributes\">\r\n                            <div id=\"str\">\r\n                                <label>\r\n                                    Strength\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"str\"\r\n                                        defaultValue={ this.state.characterInfo.str }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"str-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div id=\"dex\">\r\n                                <label>\r\n                                    Dexterity\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"dex\"\r\n                                        defaultValue={ this.state.characterInfo.dex }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"dex-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div id=\"con\">\r\n                                <label>\r\n                                    Constitution\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"con\"\r\n                                        defaultValue={ this.state.characterInfo.con }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"con-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div id=\"int\">\r\n                                <label>\r\n                                    Intelligence\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"int\"\r\n                                        defaultValue={ this.state.characterInfo.int }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"int-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div id=\"wis\">\r\n                                <label>\r\n                                    Wisdom\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"wis\"\r\n                                        defaultValue={ this.state.characterInfo.wis }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"wis-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                            <div id=\"cha\">\r\n                                <label>\r\n                                    Charisma\r\n                  <br></br>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"cha\"\r\n                                        defaultValue={ this.state.characterInfo.cha }\r\n                                        onChange={ ( e ) => this.handleAbilityScoreChange( e ) }\r\n                                        min=\"0\"\r\n                                        max=\"30\"\r\n                                        required\r\n                                    ></input>\r\n                                    <span id=\"cha-modifier\"></span>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div id=\"personality-traits\">\r\n                            <h3>Personality Traits</h3>\r\n                            <textarea\r\n                                name=\"personalityTraits\"\r\n                                cols=\"40\"\r\n                                rows=\"6\"\r\n                                defaultValue={ this.state.characterInfo.personalityTraits }\r\n                                onChange={ ( e ) => this.handleTextareaChange( e ) }\r\n                            ></textarea>\r\n                        </div>\r\n\r\n                        <div id=\"flaws\">\r\n                            <h3>Flaws</h3>\r\n                            <textarea\r\n                                name=\"flaws\"\r\n                                cols=\"40\"\r\n                                rows=\"6\"\r\n                                defaultValue={ this.state.characterInfo.flaws }\r\n                                onChange={ ( e ) => this.handleTextareaChange( e ) }\r\n                            ></textarea>\r\n                        </div>\r\n\r\n                        <div id=\"ideals\">\r\n                            <h3>Ideals</h3>\r\n                            <textarea\r\n                                name=\"ideals\"\r\n                                cols=\"40\"\r\n                                rows=\"6\"\r\n                                defaultValue={ this.state.characterInfo.ideals }\r\n                                onChange={ ( e ) => this.handleTextareaChange( e ) }\r\n                            ></textarea>\r\n                        </div>\r\n\r\n                        {/* Display Status: public or private */ }\r\n                        <div id=\"public-private\">\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"public\" // this is a state, not value\r\n                                value=\"true\"\r\n                                onChange={ ( e ) => this.handleDisplayStatusChange( e ) }\r\n                            />\r\n                            <label>Public</label>\r\n\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"public\" // this is a state, not value\r\n                                value=\"false\"\r\n                                onChange={ ( e ) => this.handleDisplayStatusChange( e ) }\r\n                            />\r\n                            <label>Private</label>\r\n                        </div>\r\n                        {/* END Display Status: public or private */ }\r\n\r\n                        <input\r\n                            id=\"create-btn\"\r\n                            type=\"submit\"\r\n                            value=\"Save Changes\"\r\n                        ></input>\r\n                        {/* <input type=\"reset\" value=\"Reset\"></input> Does not work with modifiers */ }\r\n                        <Link to=\"/\">\r\n                            <input id=\"cancel-btn\" type=\"button\" value=\"Cancel\"></input>\r\n                        </Link>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ( state ) => {\r\n    return {\r\n        allClasses: state.allClasses,\r\n        allRaces: state.allRaces,\r\n        allSkills: state.allSkills,\r\n        newCharacter: state.newCharacter,\r\n        character: state.character.characters,\r\n        currentUser: state.currentLoggedInUserInfo,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n    return {\r\n        getAllClasses: () => dispatch( getAllClasses() ),\r\n        getAllRaces: () => dispatch( getAllRaces() ),\r\n        getAllSkills: () => dispatch( getAllSkills() ),\r\n        /*  createCharacter: (characterInfo, userToken) =>\r\n         dispatch(createCharacter(characterInfo, userToken)), */\r\n        getSingleCharacter: ( id ) => dispatch( getSingleCharacter( id ) ),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)( EditCharacter )\r\n","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\characterCreation\\CharacterCreationForm.jsx",["294"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  getAllClasses,\r\n  getAllRaces,\r\n  getAllSkills,\r\n  createCharacter,\r\n  updateCharacter,\r\n} from '../../redux/reducers'\r\nimport '../../css/charactercreation.css'\r\nclass CharacterCreationForm extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      characterInfo: {\r\n        characterName: '',\r\n        class: '',\r\n        race: '',\r\n        gender: '',\r\n        proficiencyBonus: '2',\r\n        armorClass: 10,\r\n        initiative: 0,\r\n        speed: 0,\r\n        skills: [],\r\n        str: Math.floor(Math.random() * 20),\r\n        dex: Math.floor(Math.random() * 20),\r\n        con: Math.floor(Math.random() * 20),\r\n        int: Math.floor(Math.random() * 20),\r\n        wis: Math.floor(Math.random() * 20),\r\n        cha: Math.floor(Math.random() * 20),\r\n        personalityTraits: '',\r\n        flaws: '',\r\n        ideals: '',\r\n        bonds: '',\r\n        attacksAndSpellcasting: '',\r\n        featuresAndTraits: '',\r\n        equipment: '',\r\n        profAndLang: '',\r\n        userId: '',\r\n      },\r\n      public: true,\r\n      editing: this.props.location.state\r\n        ? this.props.location.state.editing\r\n        : false, // using a Link we can pass a location.state, if this component is not linked to, this local state is false\r\n      updatingCharacterId: this.props.location.state\r\n        ? this.props.location.state.updatingCharacterId\r\n        : null, // id of character being updated, if editing is true, this value MUST be true, as in it has a valid id.\r\n      oldCharacterInfo: this.props.location.state\r\n        ? this.props.location.state.oldCharacterInfo\r\n        : null,\r\n    }\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.props.getAllClasses()\r\n    await this.props.getAllRaces()\r\n    await this.props.getAllSkills()\r\n    if (this.state.oldCharacterInfo) {\r\n      const {\r\n        name,\r\n        race,\r\n        gender,\r\n        armorClass,\r\n        speed,\r\n        skill1,\r\n        skill2,\r\n        skill3,\r\n        skill4,\r\n        str,\r\n        dex,\r\n        con,\r\n        int,\r\n        wis,\r\n        cha,\r\n        personalityTraits,\r\n        flaws,\r\n        ideals,\r\n        bonds,\r\n        attacksAndSpellcasting,\r\n        featuresAndTraits,\r\n        equipment,\r\n        profAndLang,\r\n      } = this.state.oldCharacterInfo\r\n      const charaClass = this.state.oldCharacterInfo.class\r\n      let arr = []\r\n      if (skill1 !== null) {\r\n        arr.push(skill1)\r\n      }\r\n      if (skill2 !== null) {\r\n        arr.push(skill2)\r\n      }\r\n      if (skill3 !== null) {\r\n        arr.push(skill3)\r\n      }\r\n      if (skill4 !== null) {\r\n        arr.push(skill4)\r\n      }\r\n      this.setState({\r\n        characterInfo: {\r\n          characterName: name,\r\n          class: charaClass,\r\n          race: race,\r\n          gender: gender,\r\n          proficiencyBonus: '2',\r\n          armorClass: armorClass,\r\n          initiative: 0,\r\n          speed: speed,\r\n          skills: arr,\r\n          str: str,\r\n          dex: dex,\r\n          con: con,\r\n          int: int,\r\n          wis: wis,\r\n          cha: cha,\r\n          personalityTraits: personalityTraits,\r\n          flaws: flaws,\r\n          ideals: ideals,\r\n          bonds: bonds,\r\n          attacksAndSpellcasting: attacksAndSpellcasting,\r\n          featuresAndTraits: featuresAndTraits,\r\n          equipment: equipment,\r\n          profAndLang: profAndLang,\r\n          userId: '',\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  handleClassSelectChange = (e) => {\r\n    this.setState({\r\n      characterInfo: {\r\n        ...this.state.characterInfo,\r\n        class: e.target.value,\r\n      },\r\n    })\r\n  }\r\n\r\n  handleRaceSelectChange = (e) => {\r\n    const { value } = e.target\r\n\r\n    if (\r\n      value === 'dragonborn' ||\r\n      value === 'elf' ||\r\n      value === 'half-elf' ||\r\n      value === 'half-orc' ||\r\n      value === 'human' ||\r\n      value === 'tiefling'\r\n    ) {\r\n      this.setState({\r\n        characterInfo: {\r\n          ...this.state.characterInfo,\r\n          race: e.target.value,\r\n          speed: 30,\r\n        },\r\n      })\r\n    } else {\r\n      this.setState({\r\n        characterInfo: {\r\n          ...this.state.characterInfo,\r\n          race: e.target.value,\r\n          speed: 25,\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  handleGenderSelectChange = (e) => {\r\n    this.setState({\r\n      characterInfo: {\r\n        ...this.state.characterInfo,\r\n        gender: e.target.value,\r\n      },\r\n    })\r\n  }\r\n\r\n  handleSkillsSelectChange = (e) => {\r\n    if (this.state.characterInfo.skills.length === 4) {\r\n      alert('You may only have 4 skills per character!')\r\n      return\r\n    }\r\n    for (const skill of this.state.characterInfo.skills) {\r\n      if (skill === e.target.value) {\r\n        alert('No duplicate skills allowed!')\r\n        return\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      characterInfo: {\r\n        ...this.state.characterInfo,\r\n        skills: [...this.state.characterInfo.skills, e.target.value], // append skill to array\r\n      },\r\n    })\r\n  }\r\n\r\n  handleAbilityScoreChange = (e) => {\r\n    let modifier = Math.floor((parseInt(e.target.value) - 10) / 2)\r\n    document.getElementById(`${e.target.name}` + '-modifier').innerHTML =\r\n      '+' + modifier\r\n\r\n    if (e.target.name === 'dex') {\r\n      this.setState({\r\n        characterInfo: {\r\n          ...this.state.characterInfo,\r\n          [e.target.name]: e.target.value,\r\n          armorClass: 10 + modifier,\r\n        },\r\n      })\r\n    } else {\r\n      this.setState({\r\n        characterInfo: {\r\n          ...this.state.characterInfo,\r\n          [e.target.name]: e.target.value,\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  handleMainStatChange = (e) => {\r\n    this.setState({\r\n      characterInfo: {\r\n        ...this.state.characterInfo,\r\n        [e.target.name]: e.target.value,\r\n      },\r\n    })\r\n  }\r\n\r\n  handleDisplayStatusChange = (e) => {\r\n    console.log(\"status update:\", e.target.value)\r\n    this.setState({\r\n      public: e.target.value,\r\n    })\r\n    setTimeout(()=>{\r\n      console.log(\"public\",this.state.public)\r\n    }, 2000)\r\n  }\r\n\r\n  handleTextareaChange = (e) => {\r\n    this.setState({\r\n      characterInfo: {\r\n        ...this.state.characterInfo,\r\n        [e.target.name]: e.target.value,\r\n      },\r\n    })\r\n  }\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault()\r\n    /*  const { str, dex, con, wis, int, cha } = this.state\r\n     if ( ( str || dex || con || wis || int || cha ) > 30 || ( str || dex || con || wis || int || cha ) < 0 ) {\r\n       alert( \"Characters Attritbutes Are Maxed at 30\" )\r\n     }\r\n     else { */\r\n    if (this.state.public === 'false') {\r\n      this.setState({\r\n        characterInfo: {\r\n          ...this.state.characterInfo,\r\n          userId: this.props.currentUser.userId,\r\n        },\r\n      })\r\n    } else {\r\n      delete this.state.characterInfo.userId\r\n    }\r\n\r\n    // setTimeout(() => {\r\n    //   this.props.createCharacter(\r\n    //     this.state.characterInfo,\r\n    //     this.props.currentUser.token\r\n    //   )\r\n    // }, 1200)\r\n\r\n    setTimeout(() => {\r\n      if (this.state.editing) {\r\n        this.props.updateCharacter(\r\n          this.state.characterInfo,\r\n          this.state.updatingCharacterId\r\n        )\r\n      } else {\r\n        this.props.createCharacter(\r\n          this.state.characterInfo,\r\n          this.props.currentUser.token\r\n        )\r\n      }\r\n    }, 1200)\r\n\r\n    setTimeout(() => {\r\n      if (\r\n        this.props.newCharacter !== undefined ||\r\n        this.props.currentUpdatedCharacter !== undefined\r\n      ) {\r\n        if (this.state.public === 'true') {\r\n          this.props.history.push('/builds')\r\n        } else {\r\n          this.props.history.push('/userprofile')\r\n        }\r\n      }\r\n    }, 2000)\r\n    /* } */\r\n  }\r\n\r\n  render() {\r\n   /*  console.log('this.state.editing:', this.state.editing)\r\n    console.log(\r\n      'this.state.updatingCharacterId:',\r\n      this.state.updatingCharacterId\r\n    )\r\n    console.log('old chara info:', this.state.oldCharacterInfo)\r\n\r\n    console.log('chara info test:', this.state.characterInfo) */\r\n    return (\r\n      <div className=\"creation-form\">\r\n        {this.state.editing ? (\r\n          <header>DUNGEONS {'&'} DRAGONS CHARACTER EDIT FORM</header>\r\n        ) : (\r\n          <header>DUNGEONS {'&'} DRAGONS CHARACTER CREATION FORM</header>\r\n        )}\r\n\r\n        <div id=\"character-creation-form\">\r\n          {/* Main Character Creation Form */}\r\n          <form onSubmit={(e) => this.handleFormSubmit(e)}>\r\n            {/* Character Name */}\r\n            <div id=\"character-creation-name\">\r\n              <label>\r\n                Character Name:<br></br>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"characterName\"\r\n                  // placeholder=\"Raffaela Ciccone\"\r\n                  value={this.state.characterInfo.characterName}\r\n                  onChange={(e) =>\r\n                    this.setState({\r\n                      characterInfo: {\r\n                        ...this.state.characterInfo,\r\n                        characterName: e.target.value,\r\n                      },\r\n                    })\r\n                  }\r\n                  required\r\n                ></input>\r\n              </label>\r\n            </div>\r\n            <br></br>\r\n            {/* End Character Name */}\r\n\r\n            {/* Class Select */}\r\n            <div id=\"class-select\">\r\n              <label>\r\n                Select Your Classes<br></br>\r\n                <select\r\n                  name=\"classSelect\"\r\n                  onChange={(e) => this.handleClassSelectChange(e)}\r\n                  required\r\n                >\r\n                  <option value=\"\">--Choose Your Class--</option>\r\n                  {this.props.allClasses !== undefined ? (\r\n                    this.props.allClasses.map((element, index) => {\r\n                      if (element.index === this.state.characterInfo.class) {\r\n                        return (\r\n                          <option\r\n                            selected=\"selected\"\r\n                            key={index}\r\n                            value={element.index}\r\n                          >\r\n                            {element.name}\r\n                          </option>\r\n                        )\r\n                      } else {\r\n                        return (\r\n                          <option key={index} value={element.index}>\r\n                            {element.name}\r\n                          </option>\r\n                        )\r\n                      }\r\n                    })\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n                </select>\r\n              </label>\r\n            </div>\r\n            {/* End Class Select */}\r\n\r\n            <br></br>\r\n            {/* Race Select */}\r\n            <div id=\"race-select\">\r\n              <label>\r\n                Select Your Race\r\n                <br></br>\r\n                <select\r\n                  name=\"raceSelect\"\r\n                  onChange={(e) => this.handleRaceSelectChange(e)}\r\n                  required\r\n                >\r\n                  <option value=\"\">--Choose Your Race--</option>\r\n                  {this.props.allRaces !== undefined ? (\r\n                    this.props.allRaces.map((element, index) => {\r\n                      if (element.index === this.state.characterInfo.race) {\r\n                        return (\r\n                          <option\r\n                            selected=\"selected\"\r\n                            key={index}\r\n                            value={element.index}\r\n                          >\r\n                            {element.name}\r\n                          </option>\r\n                        )\r\n                      } else {\r\n                        return (\r\n                          <option key={index} value={element.index}>\r\n                            {element.name}\r\n                          </option>\r\n                        )\r\n                      }\r\n                    })\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n                </select>\r\n              </label>\r\n            </div>\r\n            {/* End Race Select */}\r\n\r\n            <br></br>\r\n            {/* Gender Select */}\r\n            <div id=\"gender-choices\">\r\n              {this.state.characterInfo.gender === 'male' ? (\r\n                <div className=\"gender-male\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    checked=\"checked\"\r\n                    id=\"male\"\r\n                    name=\"gender\"\r\n                    value=\"male\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label htmlFor=\"male\">Male</label>\r\n                </div>\r\n              ) : (\r\n                <div className=\"gender-male\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"male\"\r\n                    name=\"gender\"\r\n                    value=\"male\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label htmlFor=\"male\">Male</label>\r\n                </div>\r\n              )}\r\n              {this.state.characterInfo.gender === 'female' ? (\r\n                <div className=\"gender-female\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    checked=\"checked\"\r\n                    id=\"female\"\r\n                    name=\"gender\"\r\n                    value=\"female\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label htmlFor=\"female\">Female</label>\r\n                </div>\r\n              ) : (\r\n                <div className=\"gender-female\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"female\"\r\n                    name=\"gender\"\r\n                    value=\"female\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label htmlFor=\"female\">Female</label>\r\n                </div>\r\n              )}\r\n\r\n              {this.state.characterInfo.gender === 'other' ? (\r\n                <div className=\"gender-other\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    checked=\"checked\"\r\n                    id=\"other\"\r\n                    name=\"gender\"\r\n                    value=\"other\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label htmlFor=\"other\">Other</label>\r\n                </div>\r\n              ) : (\r\n                <div className=\"gender-other\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"other\"\r\n                    name=\"gender\"\r\n                    value=\"other\"\r\n                    onChange={(e) => this.handleGenderSelectChange(e)}\r\n                  ></input>\r\n                  <label htmlFor=\"other\">Other</label>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* End Gender Select  */}\r\n\r\n            {/* Main Stats */}\r\n            <div id=\"character-prof-bonus\">\r\n              <label>\r\n                Proficiency Bonus (+2 For Lvl.1) :\r\n                <span\r\n                  id=\"proficiencyBonus-display\"\r\n                  // type=\"number\"\r\n                  name=\"proficiencyBonus\"\r\n                  // placeholder={Math.floor(Math.random() * 6)}\r\n                  // defaultValue={Math.floor(Math.random() * 6)}\r\n                  value=\"2\"\r\n                  onChange={(e) =>\r\n                    alert('A lvl.1 character has +2 proficieny bonus!')\r\n                  }\r\n                  required\r\n                >\r\n                  {' '}\r\n                  {this.state.characterInfo.proficiencyBonus}\r\n                </span>\r\n              </label>\r\n            </div>\r\n            <div id=\"other-main-stats\">\r\n              <label>\r\n                Armor Class :\r\n                <span\r\n                  id=\"armorClass-display\"\r\n                  type=\"number\"\r\n                  name=\"armorClass\"\r\n                  required\r\n                >\r\n                  {' '}\r\n                  {this.state.characterInfo.armorClass}\r\n                </span>\r\n              </label>\r\n\r\n              {/* <br></br>\r\n          <label>\r\n            Initiative\r\n            <br></br>\r\n            <input\r\n              type=\"number\"\r\n              name=\"Initiative\"\r\n              placeholder={ Math.floor( Math.random() * 15 ) }\r\n              // defaultValue={Math.floor(Math.random() * 15)}\r\n              onChange={ ( e ) => this.handleMainStatChange( e ) }\r\n              required\r\n            ></input>\r\n          </label> */}\r\n\r\n              <br></br>\r\n              <label>\r\n                Speed :\r\n                <span\r\n                  id=\"speed-display\"\r\n                  type=\"number\"\r\n                  name=\"speed\"\r\n                  value={this.state.characterInfo.speed}\r\n                  required\r\n                >\r\n                  {' '}\r\n                  {this.state.characterInfo.speed}\r\n                </span>\r\n              </label>\r\n              <br></br>\r\n            </div>\r\n            {/* End Main Stats */}\r\n\r\n            {/* Skill Select */}\r\n            <div id=\"select-character-skill\">\r\n              <label>\r\n                Select Your Skills (Choose up to 4)\r\n                <br></br>\r\n                <select\r\n                  name=\"skillsSelect\"\r\n                  onChange={(e) => this.handleSkillsSelectChange(e)}\r\n                  required\r\n                >\r\n                  {this.state.editing ? (\r\n                    <option value=\"Add more skills\">\r\n                      --Add More Skills?--\r\n                    </option>\r\n                  ) : (\r\n                    <option value=\"Choose Your Skills\">\r\n                      --Choose Your Skills--\r\n                    </option>\r\n                  )}\r\n                  {this.props.allSkills !== undefined ? (\r\n                    this.props.allSkills.map((element, index) => {\r\n                      return (\r\n                        <option key={index} value={element.index}>\r\n                          {element.name}\r\n                        </option>\r\n                      )\r\n                    })\r\n                  ) : (\r\n                    <span />\r\n                  )}\r\n                </select>\r\n              </label>\r\n            </div>\r\n            {/* End Skill Select */}\r\n\r\n            <br></br>\r\n            {/* Ability Scores */}\r\n            <div id=\"character-attributes\">\r\n              <div id=\"str\">\r\n                <label>\r\n                  Strength\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"str\"\r\n                    value={this.state.characterInfo.str}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"str-modifier\"></span>\r\n                </label>\r\n              </div>\r\n              <div id=\"con\">\r\n                <label>\r\n                  Constitution\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"con\"\r\n                    value={this.state.characterInfo.con}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"con-modifier\"></span>\r\n                </label>\r\n              </div>\r\n              <div id=\"dex\">\r\n                <label>\r\n                  Dexterity\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"dex\"\r\n                    value={this.state.characterInfo.dex}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"dex-modifier\"></span>\r\n                </label>\r\n              </div>\r\n              <div id=\"cha\">\r\n                <label>\r\n                  Charisma\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"cha\"\r\n                    value={this.state.characterInfo.cha}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"cha-modifier\"></span>\r\n                </label>\r\n              </div>\r\n              <div id=\"int\">\r\n                <label>\r\n                  Intelligence\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"int\"\r\n                    value={this.state.characterInfo.int}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"int-modifier\"></span>\r\n                </label>\r\n              </div>\r\n              <div id=\"wis\">\r\n                <label>\r\n                  Wisdom\r\n                  <br></br>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"wis\"\r\n                    value={this.state.characterInfo.wis}\r\n                    onChange={(e) => this.handleAbilityScoreChange(e)}\r\n                    min=\"0\"\r\n                    max=\"30\"\r\n                    required\r\n                  ></input>\r\n                  <span id=\"wis-modifier\"></span>\r\n                </label>\r\n              </div>\r\n            </div>\r\n\r\n            <div id=\"personality-traits\">\r\n              <h3>Personality Traits</h3>\r\n              <textarea\r\n                name=\"personalityTraits\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.personalityTraits}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"flaws\">\r\n              <h3>Flaws</h3>\r\n              <textarea\r\n                name=\"flaws\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.flaws}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"ideals\">\r\n              <h3>Ideals</h3>\r\n              <textarea\r\n                name=\"ideals\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.ideals}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"bonds\">\r\n              <h3>Bonds</h3>\r\n              <textarea\r\n                name=\"bonds\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.bonds}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"attacks-and-spellcasting\">\r\n              <h3>Attacks {'&'} Spellcasting</h3>\r\n              <textarea\r\n                name=\"attacksAndSpellcasting\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.attacksAndSpellcasting}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"features-and-traits\">\r\n              <h3>Features {'&'} Traits</h3>\r\n              <textarea\r\n                name=\"featuresAndTraits\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.featuresAndTraits}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"equipment-cc\">\r\n              <h3>Equipment</h3>\r\n              <textarea\r\n                name=\"equipment\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.equipment}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            <div id=\"prof-and-lang\">\r\n              <h3>Proficiencies {'&'} Languages</h3>\r\n              <textarea\r\n                name=\"profAndLang\"\r\n                cols=\"40\"\r\n                rows=\"6\"\r\n                value={this.state.characterInfo.profAndLang}\r\n                onChange={(e) => this.handleTextareaChange(e)}\r\n              ></textarea>\r\n            </div>\r\n\r\n            {/* Display Status: public or private */}\r\n            <div id=\"public-private\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"public\" // this is a state, not value\r\n                value=\"true\"\r\n                onChange={(e) => this.handleDisplayStatusChange(e)}\r\n              />\r\n              <label>Public</label>\r\n\r\n              <input\r\n                type=\"radio\"\r\n                name=\"public\" // this is a state, not value\r\n                value=\"false\"\r\n                onChange={(e) => this.handleDisplayStatusChange(e)}\r\n              />\r\n              <label>Private</label>\r\n            </div>\r\n            {/* END Display Status: public or private */}\r\n\r\n            {this.state.editing ? (\r\n              <input\r\n                id=\"create-btn\"\r\n                type=\"submit\"\r\n                value=\"Update Your Character\"\r\n              ></input>\r\n            ) : (\r\n              <input\r\n                id=\"create-btn\"\r\n                type=\"submit\"\r\n                value=\"Create Your Character\"\r\n              ></input>\r\n            )}\r\n\r\n            {/* <input type=\"reset\" value=\"Reset\"></input> Does not work with modifiers */}\r\n            <Link to=\"/\">\r\n              <input id=\"cancel-btn\" type=\"button\" value=\"Cancel\"></input>\r\n            </Link>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allClasses: state.allClasses,\r\n    allRaces: state.allRaces,\r\n    allSkills: state.allSkills,\r\n    newCharacter: state.newCharacter,\r\n    currentUser: state.currentLoggedInUserInfo,\r\n    currentUpdatedCharacter: state.currentUpdatedCharacter,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllClasses: () => dispatch(getAllClasses()),\r\n    getAllRaces: () => dispatch(getAllRaces()),\r\n    getAllSkills: () => dispatch(getAllSkills()),\r\n    createCharacter: (characterInfo, userToken) =>\r\n      dispatch(createCharacter(characterInfo, userToken)),\r\n    updateCharacter: (characterInfo, updatingCharacterId) =>\r\n      dispatch(updateCharacter(characterInfo, updatingCharacterId)),\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CharacterCreationForm)\r\n","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\builds\\DisplayCharacter.jsx",["295","296","297","298","299","300","301","302","303"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { deleteCharacter, getSingleCharacter } from '../../redux/reducers'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport dragonborn from '../races/dnd race images/dragonborn.png'\r\nimport dwarf from '../races/dnd race images/dwarf.png'\r\nimport elf from '../races/dnd race images/elf.png'\r\nimport gnome from '../races/dnd race images/gnome.png'\r\nimport halfElf from '../races/dnd race images/half-elf.png'\r\nimport halfling from '../races/dnd race images/halfling.png'\r\nimport halfOrc from '../races/dnd race images/half-orc.png'\r\nimport human from '../races/dnd race images/human.png'\r\nimport tiefling from '../races/dnd race images/tiefling.png'\r\n\r\nimport '../../css/characterdisplay.css'\r\n\r\nclass DisplayCharacter extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      redirect: false,\r\n      initiative: 0,\r\n      level: 1,\r\n      success: 0,\r\n      failure: 0,\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      await this.props.getSingleCharacter(this.props.match.params.id)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  handleDelete = () => {\r\n    this.props.deleteCharacter(this.props.character.id).then(() => {\r\n      this.setState({\r\n        redirect: true,\r\n      })\r\n    })\r\n  }\r\n  getInitiative = () => {\r\n    let modifier = Math.floor((parseInt(this.props.character.dex) - 10) / 2)\r\n    let d20 = Math.round(Math.random() * 20)\r\n    this.setState({\r\n      initiative: modifier + d20,\r\n    })\r\n  }\r\n  lvlUp = () => {\r\n    this.setState({\r\n      level: this.state.level + 1,\r\n    })\r\n  }\r\n  lvlDown = () => {\r\n    if (this.state.level === 1) {\r\n      alert(\"You can't be lower than lvl. 1\")\r\n    } else {\r\n      this.setState({\r\n        level: this.state.level - 1,\r\n      })\r\n    }\r\n  }\r\n  setSucess = () => {\r\n    if (this.state.success === 3) {\r\n      alert('Death Save Success caps at 3')\r\n    } else {\r\n      this.setState({\r\n        success: this.state.success + 1,\r\n      })\r\n    }\r\n  }\r\n  setFailure = () => {\r\n    if (this.state.failure === 3) {\r\n      alert('Death Save failure caps at 3')\r\n    } else {\r\n      this.setState({\r\n        failure: this.state.failure + 1,\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect to=\"/userprofile\" />\r\n    }\r\n    return (\r\n      <div id=\"character-container\">\r\n        <div id=\"character-info-container\">\r\n          {this.props.character !== undefined ? (\r\n            <div>\r\n              <div id=\"display-character-info\">\r\n                <div id=\"character-image-info\">\r\n                  <div id=\"character-race-image\">\r\n                    {this.props.character.race === 'dragonborn' && (\r\n                      <img\r\n                        src={dragonborn}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginLeft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'dwarf' && (\r\n                      <img\r\n                        src={dwarf}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginLeft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'elf' && (\r\n                      <img\r\n                        src={elf}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginLeft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'gnome' && (\r\n                      <img\r\n                        src={gnome}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginLeft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'half-elf' && (\r\n                      <img\r\n                        src={halfElf}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginLeft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'halfling' && (\r\n                      <img\r\n                        src={halfling}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginLeft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'half-orc' && (\r\n                      <img\r\n                        src={halfOrc}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginLeft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'human' && (\r\n                      <img\r\n                        src={human}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginLeft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {this.props.character.race === 'tiefling' && (\r\n                      <img\r\n                        src={tiefling}\r\n                        alt=\"race-image\"\r\n                        height=\"500px\"\r\n                        width=\"420px\"\r\n                        marginLeft=\"30px\"\r\n                      ></img>\r\n                    )}\r\n                    {/* {\r\n                                        this.props.character.race !== (\"dragonborn\" || \"dwarf\" || \"elf\" || \"half-elf\" || \"gnome\" || \"halfling\" || \"half-orc\" || \"human\" || \"tiefling\") && <img src={ \"https://wow.zamimg.com/modelviewer/live/webthumbs/npc/15/94223.png\" } alt=\"race-image\" height=\"500px\" width=\"420px\" marginLeft = \"30px\"></img>\r\n                                    } */}\r\n                  </div>\r\n                  <div className=\"character-info\">\r\n                    <div id=\"general-info\">\r\n                      <h3>Character Name : {this.props.character.name}</h3>\r\n                      <div id=\"character-level-counter\">\r\n                        <h3 id=\"current-level\">Level: {this.state.level}</h3>\r\n                        <button id=\"lvl-up\" onClick={() => this.lvlUp()}>\r\n                          Level Up\r\n                        </button>\r\n                        <button id=\"lvl-down\" onClick={() => this.lvlDown()}>\r\n                          Level Down\r\n                        </button>\r\n                      </div>\r\n                      <h3>\r\n                        Class :{' '}\r\n                        {this.props.character.class.charAt(0).toUpperCase()}\r\n                        {this.props.character.class.substr(1)}\r\n                      </h3>\r\n                      <h3>\r\n                        Race :{' '}\r\n                        {this.props.character.race.charAt(0).toUpperCase()}\r\n                        {this.props.character.race.substr(1)}\r\n                      </h3>\r\n                      <h3>\r\n                        Gender:{' '}\r\n                        {this.props.character.gender.charAt(0).toUpperCase()}\r\n                        {this.props.character.gender.substr(1)}\r\n                      </h3>\r\n                      <h3>Armor Class : {this.props.character.armorClass}</h3>\r\n                      <h3>Speed : {this.props.character.speed}</h3>\r\n\r\n                      <div id=\"character-skills-1-4\">\r\n                        {this.props.character.skill1 !== null ? (\r\n                          <h3>Skill #1 : {this.props.character.skill1}</h3>\r\n                        ) : (\r\n                          <h3>Skill #1 : No Skill Chosen</h3>\r\n                        )}\r\n                        {this.props.character.skill2 !== null ? (\r\n                          <h3>Skill #2 : {this.props.character.skill2}</h3>\r\n                        ) : (\r\n                          <h3>Skill #2 : No Skill Chosen</h3>\r\n                        )}\r\n                        {this.props.character.skill3 !== null ? (\r\n                          <h3>Skill #3 : {this.props.character.skill3}</h3>\r\n                        ) : (\r\n                          <h3>Skill #3 : No Skill Chosen</h3>\r\n                        )}\r\n                        {this.props.character.skill4 !== null ? (\r\n                          <h3>Skill #4 : {this.props.character.skill4}</h3>\r\n                        ) : (\r\n                          <h3>Skill #4 : No Skill Chosen</h3>\r\n                        )}\r\n                      </div>\r\n                      <br></br>\r\n                      <div id=\"initiative-check\">\r\n                        <h3 id=\"initative-tag\">\r\n                          Initiative: {this.state.initiative}\r\n                        </h3>{' '}\r\n                        <button\r\n                          id=\"getInitiative\"\r\n                          onClick={(e) => this.getInitiative()}\r\n                        >\r\n                          Get Initative\r\n                        </button>\r\n                      </div>\r\n                      <div id=\"death-saves\">\r\n                        <div id=\"death-saves-success\">\r\n                          {' '}\r\n                          <button onClick={(e) => this.setSucess()}>\r\n                            Death Saves{'(Successes)'}: {this.state.success}\r\n                          </button>\r\n                        </div>\r\n                        <div id=\"death-saves-failures\">\r\n                          <button onClick={(e) => this.setFailure()}>\r\n                            Death Saves{'(Failures)'}: {this.state.failure}\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <br></br>\r\n                </div>\r\n                <div id=\"attributes\">\r\n                  <h3>Strength : {this.props.character.str}</h3>\r\n                  <h3>Dexterity : {this.props.character.dex}</h3>\r\n                  <h3>Constitution : {this.props.character.con}</h3>\r\n                  <h3>Intelligence : {this.props.character.int}</h3>\r\n                  <h3>Wisdom : {this.props.character.wis}</h3>\r\n                  <h3>Charisma : {this.props.character.cha}</h3>\r\n                </div>\r\n                <div id=\"further-info\">\r\n                  <div id=\"further-info-personality-traits\">\r\n                    <h3 id=\"further-info-personality-traits-h3\">\r\n                      Personality Traits\r\n                    </h3>\r\n                    <p>{this.props.character.personalityTraits}</p>\r\n                  </div>\r\n                  <div id=\"further-info-flaws\">\r\n                    <h3 id=\"further-info-flaws-h3\">Flaws</h3>{' '}\r\n                    <p>{this.props.character.flaws}</p>\r\n                  </div>\r\n                  <div id=\"further-info-ideals\">\r\n                    <h3 id=\"further-info-ideals-h3\">Ideals</h3>{' '}\r\n                    <p>{this.props.character.ideals}</p>\r\n                  </div>\r\n                  <div id=\"further-info-bonds\">\r\n                    <h3 id=\"further-info-bonds-h3\">Bonds</h3>{' '}\r\n                    <p>{this.props.character.bonds}</p>\r\n                  </div>\r\n                </div>\r\n                <div id=\"further-info2\">\r\n                  <div id=\"further-info2-attacksAndSpellcasting\">\r\n                    <h3 id=\"further-info2-attacksAndSpellcasting-h3\">\r\n                      Attacks {'&'} Spellcasting\r\n                    </h3>\r\n                    <p>{this.props.character.attacksAndSpellcasting}</p>\r\n                  </div>\r\n                  <div id=\"further-info2-featuresAndTraits\">\r\n                    <h3 id=\"further-info2-featuresAndTraits-h3\">\r\n                      Features {'&'} Traits\r\n                    </h3>{' '}\r\n                    <p>{this.props.character.featuresAndTraits}</p>\r\n                  </div>\r\n                  <div id=\"further-info2-equipment\">\r\n                    <h3 id=\"further-info2-equipment-h3\">Equipment</h3>{' '}\r\n                    <p>{this.props.character.equipment}</p>\r\n                  </div>\r\n                  <div id=\"further-info2-profAndLang\">\r\n                    <h3 id=\"further-info2-profAndLang-h3\">\r\n                      Proficiencies {'&'} Languages\r\n                    </h3>{' '}\r\n                    <p>{this.props.character.profAndLang}</p>\r\n                  </div>\r\n                </div>\r\n                {/* this.props.currentUser.userId === this.props.character.userId ? <Link to = {`/editCharacter/${this.props.match.params.id}`}><button id = \"edit-character-btn\">Edit</button></Link> : <span/> */}\r\n              </div>\r\n\r\n              {/* Can only see these buttons if this character has a userId (i.e. it's private). */}\r\n              {this.props.character.userId ? (\r\n                <div>\r\n                  <Link\r\n                    to={{\r\n                      pathname: '/CharacterCreation',\r\n                      state: {\r\n                        editing: true,\r\n                        updatingCharacterId: this.props.character.id,\r\n                        oldCharacterInfo: this.props.character,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <button id=\"edit-character-btn\">Edit Character</button>\r\n                  </Link>\r\n                  <button\r\n                    id=\"delete-character-btn\"\r\n                    onClick={() => this.handleDelete()}\r\n                  >\r\n                    Delete Character\r\n                  </button>\r\n                </div>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <h1 id=\"loading\">Loading</h1>\r\n          )}\r\n          {/* {this.props.character !== undefined ?\r\n                    this.props.character.map( (item, index) => {\r\n                        return(\r\n                            <div id = {item.id}>\r\n                                <h3>{item.name}</h3>\r\n                            </div>\r\n                        )\r\n                    }) : <h1>Loading</h1>\r\n                } */}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    character: state.character.characters,\r\n    currentUser: state.currentLoggedInUserInfo,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getSingleCharacter: (id) => dispatch(getSingleCharacter(id)),\r\n    deleteCharacter: (deleteCharacterId) =>\r\n      dispatch(deleteCharacter(deleteCharacterId)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayCharacter)\r\n","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\IndividualClass.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\Skills.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\ClassLevels.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\DisplayProficiencies.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\ClassSpells.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\redux\\reducers\\actionTypes.js",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\spells\\SpellDisplay.js",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\Classes.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\subclasses\\SubClass.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\StartingEquipment.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\features\\Feature.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\DisplayClass.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\features\\FeatureChoice.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\subclasses\\DisplaySubClass.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\features\\DisplayFeatures.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\monsters\\DisplayMonster.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\races\\DisplayRace.jsx",["304"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport '../../css/races.css'\r\nimport dragonborn from './dnd race images/dragonborn.png'\r\nimport dwarf from './dnd race images/dwarf.png'\r\nimport elf from './dnd race images/elf.png'\r\nimport gnome from './dnd race images/gnome.png'\r\nimport halfElf from './dnd race images/half-elf.png'\r\nimport halfling from './dnd race images/halfling.png'\r\nimport halfOrc from './dnd race images/half-orc.png'\r\nimport human from './dnd race images/human.png'\r\nimport tiefling from './dnd race images/tiefling.png'\r\n\r\nclass DisplayRace extends Component {\r\n  render() {\r\n    const { index, name } = this.props\r\n    let bkgImage\r\n    index === 'dragonborn'\r\n      ? (bkgImage = dragonborn)\r\n      : index === 'dwarf'\r\n      ? (bkgImage = dwarf)\r\n      : index === 'elf'\r\n      ? (bkgImage = elf)\r\n      : index === 'gnome'\r\n      ? (bkgImage = gnome)\r\n      : index === 'half-elf'\r\n      ? (bkgImage = halfElf)\r\n      : index === 'halfling'\r\n      ? (bkgImage = halfling)\r\n      : index === 'half-orc'\r\n      ? (bkgImage = halfOrc)\r\n      : index === 'human'\r\n      ? (bkgImage = human)\r\n      : index === 'tiefling'\r\n      ? (bkgImage = tiefling)\r\n      : (bkgImage = '')\r\n\r\n    return (\r\n      <div className=\"race-preview\">\r\n        <div>\r\n          <img src={bkgImage} alt=\"race-image\" height=\"600px\" width=\"420px\" />\r\n        </div>\r\n        <Link to={`/races/${index}`}>{name}</Link>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DisplayRace\r\n","Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\startingEquipment\\Options.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\subclasses\\SubClassSpells.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\profile\\displayUser\\UserProfile.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\profile\\displayCharacters\\DisplayUserCharacters.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCasting.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\SavingThrows.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\Proficiencies.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\Subclass.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\Choices.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\Skill.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\DisplayClass.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\PChoices.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCastingInfo.jsx",[],"Y:\\TTP\\capstone\\capstone-frontend\\capstone_frontend\\src\\components\\classes\\classes\\displayClass\\individualClass\\SpellCastingDesc.jsx",[],{"ruleId":"305","replacedBy":"306"},{"ruleId":"307","replacedBy":"308"},{"ruleId":"309","severity":1,"message":"310","line":1,"column":8,"nodeType":"311","messageId":"312","endLine":1,"endColumn":13},{"ruleId":"309","severity":1,"message":"313","line":8,"column":9,"nodeType":"311","messageId":"312","endLine":8,"endColumn":13},{"ruleId":"314","severity":1,"message":"315","line":22,"column":9,"nodeType":"316","endLine":25,"endColumn":10},{"ruleId":"317","severity":1,"message":"318","line":53,"column":13,"nodeType":"316","endLine":53,"endColumn":59},{"ruleId":"319","severity":1,"message":"320","line":135,"column":53,"nodeType":"321","messageId":"322","endLine":135,"endColumn":54},{"ruleId":"319","severity":1,"message":"320","line":200,"column":48,"nodeType":"321","messageId":"322","endLine":200,"endColumn":49},{"ruleId":"317","severity":1,"message":"318","line":97,"column":23,"nodeType":"316","endLine":103,"endColumn":24},{"ruleId":"317","severity":1,"message":"318","line":106,"column":23,"nodeType":"316","endLine":112,"endColumn":24},{"ruleId":"317","severity":1,"message":"318","line":115,"column":23,"nodeType":"316","endLine":121,"endColumn":24},{"ruleId":"317","severity":1,"message":"318","line":124,"column":23,"nodeType":"316","endLine":130,"endColumn":24},{"ruleId":"317","severity":1,"message":"318","line":133,"column":23,"nodeType":"316","endLine":139,"endColumn":24},{"ruleId":"317","severity":1,"message":"318","line":142,"column":23,"nodeType":"316","endLine":148,"endColumn":24},{"ruleId":"317","severity":1,"message":"318","line":151,"column":23,"nodeType":"316","endLine":157,"endColumn":24},{"ruleId":"317","severity":1,"message":"318","line":160,"column":23,"nodeType":"316","endLine":166,"endColumn":24},{"ruleId":"317","severity":1,"message":"318","line":169,"column":23,"nodeType":"316","endLine":175,"endColumn":24},{"ruleId":"317","severity":1,"message":"318","line":41,"column":11,"nodeType":"316","endLine":41,"endColumn":79},"no-native-reassign",["323"],"no-negated-in-lhs",["324"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'bool' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]